/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.life.majiang.community.cache;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Vector;
import java.util.function.Function;
import life.majiang.community.cache.HotTagCache;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class HotTagCache_SSTest extends HotTagCache_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_equals_0()  throws Throwable  {
      HotTagCache hotTagCache0 = new HotTagCache();
      HotTagCache hotTagCache1 = new HotTagCache();
      boolean boolean0 = hotTagCache0.equals(hotTagCache1);
      assertTrue(boolean0);
  }
  @Test(timeout = 4000)
  public void test_equals_1()  throws Throwable  {
      HotTagCache hotTagCache0 = new HotTagCache();
      boolean boolean0 = hotTagCache0.equals(hotTagCache0);
      assertTrue(boolean0);
  }
  @Test(timeout = 4000)
  public void test_toString_2()  throws Throwable  {
      HotTagCache hotTagCache0 = new HotTagCache();
      String string0 = hotTagCache0.toString();
      assertEquals("HotTagCache(hots=[])", string0);
  }
  @Test(timeout = 4000)
  public void test_canEqual_3()  throws Throwable  {
      HotTagCache hotTagCache0 = new HotTagCache();
      Object object0 = PrivateAccess.callMethod((Class<HotTagCache>) HotTagCache.class, hotTagCache0, "canEqual", (Object) hotTagCache0, (Class<?>) Object.class);
      assertEquals(true, object0);
  }
  @Test(timeout = 4000)
  public void test_hashCode_4()  throws Throwable  {
      HotTagCache hotTagCache0 = new HotTagCache();

      //invoke method for hotTagCache0
      hotTagCache0.hashCode();
  }
  @Test(timeout = 4000)
  public void test_setHots_5()  throws Throwable  {
      HotTagCache hotTagCache0 = new HotTagCache();
      Vector<String> vector0 = new Vector<String>();
      hotTagCache0.setHots(vector0);
      assertEquals(10, vector0.capacity());
  }
  @Test(timeout = 4000)
  public void test_updateTags_6()  throws Throwable  {
      HotTagCache hotTagCache0 = new HotTagCache();
      ArrayList<String> arrayList0 = new ArrayList<String>(54);
      arrayList0.add("life.majiang.community.cache.HotTagCache");
      arrayList0.remove((Object) hotTagCache0);
      assertFalse(arrayList0.isEmpty());
      
      Integer integer0 = new Integer(26);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put("1", integer0);
      hashMap0.put("(", integer0);
      Integer integer1 = Integer.valueOf("0", 26);
      Integer integer2 = new Integer(672);
      hashMap0.put("\"!-", integer2);
      Integer integer3 = new Integer(6);
      hashMap0.put("59", integer3);
      hashMap0.putIfAbsent("64", integer3);
      hashMap0.put("life.majiang.community.cache.HotTagCache", integer2);
      Integer integer4 = new Integer(0);
      hashMap0.put("c}?l$&5(fkG5Cq3{", integer4);
      hashMap0.put("r", integer3);
      hashMap0.put("IGNORE_TYPE_VARIABLE_OR_WILDCARD", integer3);
      Integer integer5 = new Integer(1080);
      hashMap0.put("@vOPPI'KpH6lSAzL", integer5);
      hashMap0.put("5", integer0);
      hashMap0.put("[,2,EOW%", integer1);
      hotTagCache0.updateTags(hashMap0);
      assertEquals(12, hashMap0.size());
  }
  @Test(timeout = 4000)
  public void test_updateTags_7()  throws Throwable  {
      HotTagCache hotTagCache0 = new HotTagCache();
      Integer integer0 = new Integer(26);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put("(", integer0);
      hashMap0.put("", integer0);
      Integer integer1 = new Integer(672);
      hashMap0.put("\"!-", integer1);
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(function0).apply(any());
      Integer integer2 = hashMap0.computeIfAbsent("1.0", function0);
      Integer integer3 = new Integer(59);
      hashMap0.put("HotTagCache(hots=", integer3);
      hashMap0.put("1", integer0);
      hashMap0.putIfAbsent("64", integer2);
      hashMap0.put("life.majiang.community.cache.HotTagCache", integer1);
      Integer integer4 = new Integer(8202);
      hashMap0.put("}86%", integer0);
      hashMap0.put("@vOPPI'KpH6lSAzL", integer1);
      hashMap0.put("'W>\"C;<", integer4);
      hotTagCache0.updateTags(hashMap0);
      assertEquals(11, hashMap0.size());
  }}

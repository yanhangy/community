/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.life.majiang.community.exception;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import life.majiang.community.exception.CustomizeException;
import life.majiang.community.exception.ICustomizeErrorCode;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CustomizeException_SSTest extends CustomizeException_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_getMessage_0()  throws Throwable  {
      ICustomizeErrorCode iCustomizeErrorCode0 = mock(ICustomizeErrorCode.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      CustomizeException customizeException0 = new CustomizeException(iCustomizeErrorCode0);

      //invoke method for customizeException0
      customizeException0.getCode();
      String string0 = customizeException0.getMessage();
      assertNull(string0);
  }}

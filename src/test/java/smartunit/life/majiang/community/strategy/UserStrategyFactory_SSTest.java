/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.life.majiang.community.strategy;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import java.util.Vector;
import life.majiang.community.strategy.UserStrategy;
import life.majiang.community.strategy.UserStrategyFactory;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class UserStrategyFactory_SSTest extends UserStrategyFactory_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_getStrategy_0()  throws Throwable  {
      UserStrategyFactory userStrategyFactory0 = new UserStrategyFactory();
      Vector<UserStrategy> vector0 = new Vector<UserStrategy>();
      UserStrategy userStrategy0 = mock(UserStrategy.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("life.majiang.community.strategy.UserStrategyFactory").when(userStrategy0).toString();
      doReturn("1.0").when(userStrategy0).getSupportedType();
      vector0.add(userStrategy0);

      //invoke method for userStrategyFactory0
      PrivateAccess.setVariable((Class<?>) UserStrategyFactory.class, userStrategyFactory0, "strategies", (Object) vector0);
      UserStrategy userStrategy1 = userStrategyFactory0.getStrategy("1.0");
      assertNotNull(userStrategy1);
      assertEquals("1.0", userStrategy1.getSupportedType());
  }
  @Test(timeout = 4000)
  public void test_getStrategy_1()  throws Throwable  {
      UserStrategyFactory userStrategyFactory0 = new UserStrategyFactory();
      Vector<UserStrategy> vector0 = new Vector<UserStrategy>();
      UserStrategy userStrategy0 = mock(UserStrategy.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(" and ").when(userStrategy0).getSupportedType();
      vector0.add(userStrategy0);

      //invoke method for userStrategyFactory0
      PrivateAccess.setVariable((Class<?>) UserStrategyFactory.class, userStrategyFactory0, "strategies", (Object) vector0);
      UserStrategy userStrategy1 = userStrategyFactory0.getStrategy("1.0");
      assertNull(userStrategy1);
  }}

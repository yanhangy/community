/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.life.majiang.community.strategy;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import life.majiang.community.provider.GithubProvider;
import life.majiang.community.provider.UFileService;
import life.majiang.community.provider.dto.GithubUser;
import life.majiang.community.strategy.GithubUserStrategy;
import life.majiang.community.strategy.LoginUserInfo;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class GithubUserStrategy_SSTest extends GithubUserStrategy_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_getSupportedType_0()  throws Throwable  {
      GithubUserStrategy githubUserStrategy0 = new GithubUserStrategy();
      String string0 = githubUserStrategy0.getSupportedType();
      assertEquals("github", string0);
  }
  @Test(timeout = 4000)
  public void test_getUser_1()  throws Throwable  {
      GithubUserStrategy githubUserStrategy0 = new GithubUserStrategy();

      //prepare data for githubProvider0
      Long long0 = new Long(2049L);
      GithubUser githubUser0 = mock(GithubUser.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("github").when(githubUser0).getAvatarUrl();
      doReturn("125").when(githubUser0).getBio();
      doReturn(long0).when(githubUser0).getId();
      doReturn("1").when(githubUser0).getName();
      GithubProvider githubProvider0 = mock(GithubProvider.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("life.majiang.community.strategy.GithubUserStrategy").when(githubProvider0).getAccessToken(nullable(life.majiang.community.dto.AccessTokenDTO.class));
      doReturn(githubUser0).when(githubProvider0).getUser(nullable(java.lang.String.class));

      //invoke method for githubUserStrategy0
      PrivateAccess.setVariable((Class<?>) GithubUserStrategy.class, githubUserStrategy0, "githubProvider", (Object) githubProvider0);
      LoginUserInfo loginUserInfo0 = githubUserStrategy0.getUser("The required param 'inputStream' can not be null", "github");
      assertEquals("github", loginUserInfo0.getAvatarUrl());
  }
  @Test(timeout = 4000)
  public void test_getUser_2()  throws Throwable  {
      GithubUserStrategy githubUserStrategy0 = new GithubUserStrategy();

      //prepare data for githubProvider0
      GithubUser githubUser0 = mock(GithubUser.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      GithubProvider githubProvider0 = mock(GithubProvider.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("").when(githubProvider0).getAccessToken(nullable(life.majiang.community.dto.AccessTokenDTO.class));
      doReturn(githubUser0).when(githubProvider0).getUser(nullable(java.lang.String.class));
      UFileService uFileService0 = mock(UFileService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //invoke method for githubUserStrategy0
      PrivateAccess.setVariable((Class<?>) GithubUserStrategy.class, githubUserStrategy0, "uFileService", (Object) uFileService0);

      //invoke method for githubUserStrategy0
      PrivateAccess.setVariable((Class<?>) GithubUserStrategy.class, githubUserStrategy0, "githubProvider", (Object) githubProvider0);
      LoginUserInfo loginUserInfo0 = githubUserStrategy0.getUser("1", "2%!N4uxa$/~<_./j.");
      assertNull(loginUserInfo0.getAvatarUrl());
  }}

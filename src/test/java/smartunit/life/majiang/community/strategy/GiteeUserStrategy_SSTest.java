/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.life.majiang.community.strategy;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import life.majiang.community.provider.GiteeProvider;
import life.majiang.community.provider.dto.GiteeUser;
import life.majiang.community.strategy.GiteeUserStrategy;
import life.majiang.community.strategy.LoginUserInfo;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class GiteeUserStrategy_SSTest extends GiteeUserStrategy_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_getSupportedType_0()  throws Throwable  {
      GiteeUserStrategy giteeUserStrategy0 = new GiteeUserStrategy();
      String string0 = giteeUserStrategy0.getSupportedType();
      assertEquals("gitee", string0);
  }
  @Test(timeout = 4000)
  public void test_getUser_1()  throws Throwable  {
      GiteeUserStrategy giteeUserStrategy0 = new GiteeUserStrategy();

      //prepare data for giteeProvider0
      GiteeUser giteeUser0 = mock(GiteeUser.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      GiteeProvider giteeProvider0 = mock(GiteeProvider.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("life.majiang.community.strategy.GiteeUserStrategy").when(giteeProvider0).getAccessToken(nullable(life.majiang.community.dto.AccessTokenDTO.class));
      doReturn(giteeUser0).when(giteeProvider0).getUser(nullable(java.lang.String.class));

      //invoke method for giteeUserStrategy0
      PrivateAccess.setVariable((Class<?>) GiteeUserStrategy.class, giteeUserStrategy0, "giteeProvider", (Object) giteeProvider0);
      LoginUserInfo loginUserInfo0 = giteeUserStrategy0.getUser("gitee", "size == 0");
      assertNull(loginUserInfo0.getAvatarUrl());
  }}

/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.life.majiang.community.service;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import life.majiang.community.dto.CommentDTO;
import life.majiang.community.enums.CommentTypeEnum;
import life.majiang.community.mapper.CommentExtMapper;
import life.majiang.community.mapper.CommentMapper;
import life.majiang.community.mapper.NotificationMapper;
import life.majiang.community.mapper.QuestionMapper;
import life.majiang.community.mapper.UserMapper;
import life.majiang.community.model.Comment;
import life.majiang.community.model.Question;
import life.majiang.community.model.User;
import life.majiang.community.service.CommentService;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CommentService_SSTest extends CommentService_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_insert_0()  throws Throwable  {
      CommentService commentService0 = new CommentService();
      Comment comment0 = new Comment();
      User user0 = new User();
      // Undeclared exception!
      try { 

        //invoke method for commentService0
        commentService0.insert(comment0, user0);
      
      } catch(Throwable e) {
         //
         // Exception Name: RuntimeException
         // \u672A\u9009\u4E2D\u4EFB\u4F55\u95EE\u9898\u6216\u8BC4\u8BBA\u8FDB\u884C\u56DE\u590D
         //
      }
  }
  @Test(timeout = 4000)
  public void test_insert_1()  throws Throwable  {
      CommentService commentService0 = new CommentService();

      //prepare data for comment0
      Long long0 = new Long((-1L));
      Integer integer0 = new Integer(543);
      Comment comment0 = mock(Comment.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0).when(comment0).getParentId();
      doReturn(integer0, integer0).when(comment0).getType();
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      // Undeclared exception!
      try { 

        //invoke method for commentService0
        commentService0.insert(comment0, user0);
      
      } catch(Throwable e) {
         //
         // Exception Name: RuntimeException
         // \u8BC4\u8BBA\u7C7B\u578B\u9519\u8BEF\u6216\u4E0D\u5B58\u5728
         //
      }
  }
  @Test(timeout = 4000)
  public void test_insert_2()  throws Throwable  {
      CommentService commentService0 = new CommentService();

      //prepare data for comment0
      Long long0 = new Long(653L);
      Comment comment0 = mock(Comment.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(comment0).getParentId();
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      // Undeclared exception!
      try { 

        //invoke method for commentService0
        commentService0.insert(comment0, user0);
      
      } catch(Throwable e) {
         //
         // Exception Name: RuntimeException
         // \u8BC4\u8BBA\u7C7B\u578B\u9519\u8BEF\u6216\u4E0D\u5B58\u5728
         //
      }
  }
  @Test(timeout = 4000)
  public void test_listByTargetId_3()  throws Throwable  {
      CommentService commentService0 = new CommentService();

      //prepare data for commentMapper0
      Stack<Comment> stack0 = new Stack<Comment>();
      CommentMapper commentMapper0 = mock(CommentMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(stack0).when(commentMapper0).selectByExample(nullable(life.majiang.community.model.CommentExample.class));

      //invoke method for commentService0
      PrivateAccess.setVariable((Class<?>) CommentService.class, commentService0, "commentMapper", (Object) commentMapper0);
      Long long0 = new Long((-1L));
      CommentTypeEnum commentTypeEnum0 = CommentTypeEnum.COMMENT;
      List<CommentDTO> list0 = commentService0.listByTargetId(long0, commentTypeEnum0);
      assertEquals(0, list0.size());
  }
  @Test(timeout = 4000)
  public void test_insert_4()  throws Throwable  {
      CommentService commentService0 = new CommentService();
      CommentExtMapper commentExtMapper0 = mock(CommentExtMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //prepare data for comment1
      Long long0 = new Long(1234L);
      Comment comment0 = mock(Comment.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(comment0).getParentId();
      CommentMapper commentMapper0 = mock(CommentMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(comment0).when(commentMapper0).selectByPrimaryKey(nullable(java.lang.Long.class));
      Question question0 = mock(Question.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      QuestionMapper questionMapper0 = mock(QuestionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(question0).when(questionMapper0).selectByPrimaryKey(nullable(java.lang.Long.class));
      PrivateAccess.setVariable((Class<?>) CommentService.class, commentService0, "questionMapper", (Object) questionMapper0);
      PrivateAccess.setVariable((Class<?>) CommentService.class, commentService0, "commentMapper", (Object) commentMapper0);
      PrivateAccess.setVariable((Class<?>) CommentService.class, commentService0, "commentExtMapper", (Object) commentExtMapper0);
      CommentTypeEnum commentTypeEnum0 = CommentTypeEnum.COMMENT;
      Integer integer0 = commentTypeEnum0.getType();
      Comment comment1 = mock(Comment.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0, long0, long0).when(comment1).getParentId();
      doReturn(integer0, integer0, integer0).when(comment1).getType();
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //invoke method for commentService0
      commentService0.insert(comment1, user0);
  }
  @Test(timeout = 4000)
  public void test_listByTargetId_5()  throws Throwable  {
      CommentService commentService0 = new CommentService();

      //prepare data for commentMapper0
      ArrayList<Comment> arrayList0 = new ArrayList<Comment>();
      Comment comment0 = new Comment();
      arrayList0.add(comment0);
      CommentMapper commentMapper0 = mock(CommentMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(commentMapper0).selectByExample(nullable(life.majiang.community.model.CommentExample.class));

      //prepare data for userMapper0
      ArrayList<User> arrayList1 = new ArrayList<User>();
      UserMapper userMapper0 = mock(UserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList1).when(userMapper0).selectByExample(nullable(life.majiang.community.model.UserExample.class));

      //invoke method for commentService0
      PrivateAccess.setVariable((Class<?>) CommentService.class, commentService0, "userMapper", (Object) userMapper0);

      //invoke method for commentService0
      PrivateAccess.setVariable((Class<?>) CommentService.class, commentService0, "commentMapper", (Object) commentMapper0);
      Long long0 = new Long(708L);
      CommentTypeEnum commentTypeEnum0 = CommentTypeEnum.COMMENT;
      List<CommentDTO> list0 = commentService0.listByTargetId(long0, commentTypeEnum0);
      assertFalse(list0.isEmpty());
  }
  @Test(timeout = 4000)
  public void test_insert_6()  throws Throwable  {
      CommentService commentService0 = new CommentService();

      //prepare data for commentExtMapper0
      CommentExtMapper commentExtMapper0 = mock(CommentExtMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(92).when(commentExtMapper0).incCommentCount(nullable(life.majiang.community.model.Comment.class));

      //prepare data for commentMapper0
      Comment comment0 = new Comment();
      CommentMapper commentMapper0 = mock(CommentMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(306654252).when(commentMapper0).insert(nullable(life.majiang.community.model.Comment.class));
      doReturn(comment0).when(commentMapper0).selectByPrimaryKey(nullable(java.lang.Long.class));
      NotificationMapper notificationMapper0 = mock(NotificationMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //prepare data for comment1
      Long long0 = new Long(1669L);
      Question question0 = mock(Question.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(question0).getId();
      doReturn("1").when(question0).getTitle();
      QuestionMapper questionMapper0 = mock(QuestionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(question0).when(questionMapper0).selectByPrimaryKey(nullable(java.lang.Long.class));
      PrivateAccess.setVariable((Class<?>) CommentService.class, commentService0, "questionMapper", (Object) questionMapper0);
      PrivateAccess.setVariable((Class<?>) CommentService.class, commentService0, "notificationMapper", (Object) notificationMapper0);
      PrivateAccess.setVariable((Class<?>) CommentService.class, commentService0, "commentMapper", (Object) commentMapper0);
      PrivateAccess.setVariable((Class<?>) CommentService.class, commentService0, "commentExtMapper", (Object) commentExtMapper0);
      CommentTypeEnum commentTypeEnum0 = CommentTypeEnum.COMMENT;
      Integer integer0 = commentTypeEnum0.getType();
      Comment comment1 = mock(Comment.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(comment1).getCommentator();
      doReturn(long0, long0, long0, long0).when(comment1).getParentId();
      doReturn(integer0, integer0, integer0).when(comment1).getType();
      User user0 = new User();
      commentService0.insert(comment1, user0);
      assertNull(user0.getName());
  }}

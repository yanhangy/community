/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.life.majiang.community.service;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import life.majiang.community.cache.QuestionCache;
import life.majiang.community.dto.PaginationDTO;
import life.majiang.community.dto.QuestionDTO;
import life.majiang.community.mapper.QuestionExtMapper;
import life.majiang.community.mapper.QuestionMapper;
import life.majiang.community.mapper.UserMapper;
import life.majiang.community.model.Question;
import life.majiang.community.model.User;
import life.majiang.community.service.QuestionService;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class QuestionService_SSTest extends QuestionService_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_selectRelated_00()  throws Throwable  {
      QuestionService questionService0 = new QuestionService();

      //prepare data for questionDTO0
      QuestionDTO questionDTO0 = mock(QuestionDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("").when(questionDTO0).getTag();
      List<QuestionDTO> list0 = questionService0.selectRelated(questionDTO0);
      assertTrue(list0.isEmpty());
  }
  @Test(timeout = 4000)
  public void test_createOrUpdate_01()  throws Throwable  {
      QuestionService questionService0 = new QuestionService();

      //prepare data for questionMapper0
      QuestionMapper questionMapper0 = mock(QuestionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(7).when(questionMapper0).insert(nullable(life.majiang.community.model.Question.class));

      //invoke method for questionService0
      PrivateAccess.setVariable((Class<?>) QuestionService.class, questionService0, "questionMapper", (Object) questionMapper0);

      //prepare data for question0
      Long long0 = new Long(747L);
      Question question0 = mock(Question.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(question0).getGmtCreate();
      doReturn(long0).when(question0).getId();
      // Undeclared exception!
      try { 

        //invoke method for questionService0
        questionService0.createOrUpdate(question0);
      
      } catch(Throwable e) {
         //
         // Exception Name: RuntimeException
         // \u4F60\u627E\u5230\u95EE\u9898\u4E0D\u5728\u4E86\uFF0C\u8981\u4E0D\u8981\u6362\u4E2A\u8BD5\u8BD5\uFF1F
         //
      }
  }
  @Test(timeout = 4000)
  public void test_createOrUpdate_02()  throws Throwable  {
      QuestionService questionService0 = new QuestionService();

      //prepare data for question1
      Long long0 = new Long(64L);
      Question question0 = mock(Question.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(question0).getCreator();
      QuestionMapper questionMapper0 = mock(QuestionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(question0).when(questionMapper0).selectByPrimaryKey(nullable(java.lang.Long.class));
      PrivateAccess.setVariable((Class<?>) QuestionService.class, questionService0, "questionMapper", (Object) questionMapper0);
      Question question1 = mock(Question.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(question1).getCreator();
      doReturn(long0, long0).when(question1).getId();
      // Undeclared exception!
      try { 

        //invoke method for questionService0
        questionService0.createOrUpdate(question1);
      
      } catch(Throwable e) {
         //
         // Exception Name: RuntimeException
         // \u4F60\u627E\u5230\u95EE\u9898\u4E0D\u5728\u4E86\uFF0C\u8981\u4E0D\u8981\u6362\u4E2A\u8BD5\u8BD5\uFF1F
         //
      }
  }
  @Test(timeout = 4000)
  public void test_incView_03()  throws Throwable  {
      QuestionService questionService0 = new QuestionService();

      //prepare data for questionExtMapper0
      QuestionExtMapper questionExtMapper0 = mock(QuestionExtMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(1).when(questionExtMapper0).incView(nullable(life.majiang.community.model.Question.class));

      //invoke method for questionService0
      PrivateAccess.setVariable((Class<?>) QuestionService.class, questionService0, "questionExtMapper", (Object) questionExtMapper0);
      Long long0 = new Long(1567L);

      //invoke method for questionService0
      questionService0.incView(long0);
  }
  @Test(timeout = 4000)
  public void test_getById_04()  throws Throwable  {
      QuestionService questionService0 = new QuestionService();

      //prepare data for questionMapper0
      Question question0 = mock(Question.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      QuestionMapper questionMapper0 = mock(QuestionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(question0).when(questionMapper0).selectByPrimaryKey(nullable(java.lang.Long.class));
      UserMapper userMapper0 = mock(UserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //invoke method for questionService0
      PrivateAccess.setVariable((Class<?>) QuestionService.class, questionService0, "userMapper", (Object) userMapper0);

      //invoke method for questionService0
      PrivateAccess.setVariable((Class<?>) QuestionService.class, questionService0, "questionMapper", (Object) questionMapper0);
      Long long0 = new Long(0L);
      QuestionDTO questionDTO0 = questionService0.getById(long0);
      assertNull(questionDTO0.getDescription());
  }
  @Test(timeout = 4000)
  public void test_createOrUpdate_05()  throws Throwable  {
      QuestionService questionService0 = new QuestionService();

      //prepare data for questionMapper0
      QuestionMapper questionMapper0 = mock(QuestionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(12).when(questionMapper0).insert(nullable(life.majiang.community.model.Question.class));

      //invoke method for questionService0
      PrivateAccess.setVariable((Class<?>) QuestionService.class, questionService0, "questionMapper", (Object) questionMapper0);
      Question question0 = new Question();
      questionService0.createOrUpdate(question0);
      assertEquals(0, (int)question0.getLikeCount());
      assertEquals(0, (int)question0.getCommentCount());
      assertEquals(0, (int)question0.getSticky());
      assertEquals(0, (int)question0.getViewCount());
  }
  @Test(timeout = 4000)
  public void test_createOrUpdate_06()  throws Throwable  {
      QuestionService questionService0 = new QuestionService();

      //prepare data for question1
      Long long0 = new Long(0L);
      Question question0 = mock(Question.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(question0).getCreator();
      QuestionMapper questionMapper0 = mock(QuestionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(question0).when(questionMapper0).selectByPrimaryKey(nullable(java.lang.Long.class));
      doReturn(2012).when(questionMapper0).updateByExampleSelective(nullable(life.majiang.community.model.Question.class) , nullable(life.majiang.community.model.QuestionExample.class));
      PrivateAccess.setVariable((Class<?>) QuestionService.class, questionService0, "questionMapper", (Object) questionMapper0);
      Question question1 = mock(Question.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(question1).getCreator();
      doReturn("\u4F60\u627E\u5230\u95EE\u9898\u4E0D\u5728\u4E86\uFF0C\u8981\u4E0D\u8981\u6362\u4E2A\u8BD5\u8BD5\uFF1F").when(question1).getDescription();
      doReturn(long0, long0, long0).when(question1).getId();
      doReturn("UnsafeAtomicHelper is broken!").when(question1).getTag();
      doReturn("1").when(question1).getTitle();
      // Undeclared exception!
      try { 

        //invoke method for questionService0
        questionService0.createOrUpdate(question1);
      
      } catch(Throwable e) {
         //
         // Exception Name: RuntimeException
         // \u4F60\u627E\u5230\u95EE\u9898\u4E0D\u5728\u4E86\uFF0C\u8981\u4E0D\u8981\u6362\u4E2A\u8BD5\u8BD5\uFF1F
         //
      }
  }
  @Test(timeout = 4000)
  public void test_createOrUpdate_07()  throws Throwable  {
      QuestionService questionService0 = new QuestionService();

      //prepare data for question1
      Long long0 = new Long(0L);
      Question question0 = mock(Question.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(question0).getCreator();
      QuestionMapper questionMapper0 = mock(QuestionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(question0).when(questionMapper0).selectByPrimaryKey(nullable(java.lang.Long.class));
      doReturn(1).when(questionMapper0).updateByExampleSelective(nullable(life.majiang.community.model.Question.class) , nullable(life.majiang.community.model.QuestionExample.class));
      PrivateAccess.setVariable((Class<?>) QuestionService.class, questionService0, "questionMapper", (Object) questionMapper0);
      Question question1 = mock(Question.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(question1).getCreator();
      doReturn("f+0,").when(question1).getDescription();
      doReturn(long0, long0, long0).when(question1).getId();
      doReturn("INVALID_OPERATION").when(question1).getTag();
      doReturn("f+0,").when(question1).getTitle();

      //invoke method for questionService0
      questionService0.createOrUpdate(question1);
  }
  @Test(timeout = 4000)
  public void test_list_08()  throws Throwable  {
      QuestionService questionService0 = new QuestionService();
      QuestionDTO questionDTO0 = new QuestionDTO();
      Integer integer0 = questionDTO0.getSticky();

      //prepare data for questionExtMapper0
      QuestionExtMapper questionExtMapper0 = mock(QuestionExtMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((Integer) null).when(questionExtMapper0).countBySearch(nullable(life.majiang.community.dto.QuestionQueryDTO.class));

      //invoke method for questionService0
      PrivateAccess.setVariable((Class<?>) QuestionService.class, questionService0, "questionExtMapper", (Object) questionExtMapper0);
      // Undeclared exception!
      try { 

        //invoke method for questionService0
        questionService0.list("com.google.common.cache.ForwardingLoadingCache", "", "HOT30", integer0, integer0);
      
      } catch(Throwable e) {
         //
         // Exception Name: NullPointerException
         // no message in exception (getMessage() returned null)
         //
      }
  }
  @Test(timeout = 4000)
  public void test_selectRelated_09()  throws Throwable  {
      QuestionService questionService0 = new QuestionService();

      //prepare data for questionExtMapper0
      LinkedList<Question> linkedList0 = new LinkedList<Question>();
      Question question0 = mock(Question.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      linkedList0.add(question0);
      QuestionExtMapper questionExtMapper0 = mock(QuestionExtMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(questionExtMapper0).selectRelated(nullable(life.majiang.community.model.Question.class));

      //invoke method for questionService0
      PrivateAccess.setVariable((Class<?>) QuestionService.class, questionService0, "questionExtMapper", (Object) questionExtMapper0);

      //prepare data for questionDTO0
      Long long0 = new Long(1534L);
      QuestionDTO questionDTO0 = mock(QuestionDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(questionDTO0).getId();
      doReturn("life.majiang.community.service.QuestionService", "RESTRUCTURE_BEFORE").when(questionDTO0).getTag();
      List<QuestionDTO> list0 = questionService0.selectRelated(questionDTO0);
      assertFalse(list0.isEmpty());
  }
  @Test(timeout = 4000)
  public void test_list_10()  throws Throwable  {
      QuestionService questionService0 = new QuestionService();

      //prepare data for questionMapper0
      LinkedList<Question> linkedList0 = new LinkedList<Question>();
      QuestionMapper questionMapper0 = mock(QuestionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1L)).when(questionMapper0).countByExample(nullable(life.majiang.community.model.QuestionExample.class));
      doReturn(linkedList0).when(questionMapper0).selectByExampleWithRowbounds(nullable(life.majiang.community.model.QuestionExample.class) , nullable(org.apache.ibatis.session.RowBounds.class));

      //invoke method for questionService0
      PrivateAccess.setVariable((Class<?>) QuestionService.class, questionService0, "questionMapper", (Object) questionMapper0);
      Long long0 = new Long((-1L));
      Integer integer0 = new Integer((-1));
      PaginationDTO paginationDTO0 = questionService0.list(long0, integer0, integer0);
      assertFalse(paginationDTO0.isShowNext());
      assertFalse(paginationDTO0.isShowFirstPage());
  }
  @Test(timeout = 4000)
  public void test_list_11()  throws Throwable  {
      QuestionService questionService0 = new QuestionService();

      //prepare data for questionMapper0
      LinkedList<Question> linkedList0 = new LinkedList<Question>();
      QuestionMapper questionMapper0 = mock(QuestionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((-1L)).when(questionMapper0).countByExample(nullable(life.majiang.community.model.QuestionExample.class));
      doReturn(linkedList0).when(questionMapper0).selectByExampleWithRowbounds(nullable(life.majiang.community.model.QuestionExample.class) , nullable(org.apache.ibatis.session.RowBounds.class));

      //invoke method for questionService0
      PrivateAccess.setVariable((Class<?>) QuestionService.class, questionService0, "questionMapper", (Object) questionMapper0);
      Long long0 = Long.valueOf((-1L));
      Integer integer0 = new Integer(49);
      PaginationDTO paginationDTO0 = questionService0.list(long0, integer0, integer0);
      assertFalse(paginationDTO0.isShowEndPage());
      assertFalse(paginationDTO0.isShowPrevious());
  }
  @Test(timeout = 4000)
  public void test_list_12()  throws Throwable  {
      QuestionService questionService0 = new QuestionService();

      //prepare data for questionMapper0
      ArrayList<Question> arrayList0 = new ArrayList<Question>();
      Question question0 = mock(Question.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      arrayList0.add(question0);
      QuestionMapper questionMapper0 = mock(QuestionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(2275L).when(questionMapper0).countByExample(nullable(life.majiang.community.model.QuestionExample.class));
      doReturn(arrayList0).when(questionMapper0).selectByExampleWithRowbounds(nullable(life.majiang.community.model.QuestionExample.class) , nullable(org.apache.ibatis.session.RowBounds.class));
      UserMapper userMapper0 = mock(UserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //invoke method for questionService0
      PrivateAccess.setVariable((Class<?>) QuestionService.class, questionService0, "userMapper", (Object) userMapper0);

      //invoke method for questionService0
      PrivateAccess.setVariable((Class<?>) QuestionService.class, questionService0, "questionMapper", (Object) questionMapper0);
      Long long0 = Long.getLong("pattern", 2934L);
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-1));
      PaginationDTO paginationDTO0 = questionService0.list(long0, integer0, integer1);
      assertEquals((-2275), (int)paginationDTO0.getPage());
      assertFalse(paginationDTO0.isShowEndPage());
  }
  @Test(timeout = 4000)
  public void test_list_13()  throws Throwable  {
      QuestionService questionService0 = new QuestionService();

      //prepare data for questionMapper0
      ArrayList<Question> arrayList0 = new ArrayList<Question>();
      Question question0 = mock(Question.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      arrayList0.add(question0);
      QuestionMapper questionMapper0 = mock(QuestionMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(619L).when(questionMapper0).countByExample(nullable(life.majiang.community.model.QuestionExample.class));
      doReturn(arrayList0).when(questionMapper0).selectByExampleWithRowbounds(nullable(life.majiang.community.model.QuestionExample.class) , nullable(org.apache.ibatis.session.RowBounds.class));
      UserMapper userMapper0 = mock(UserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //invoke method for questionService0
      PrivateAccess.setVariable((Class<?>) QuestionService.class, questionService0, "userMapper", (Object) userMapper0);

      //invoke method for questionService0
      PrivateAccess.setVariable((Class<?>) QuestionService.class, questionService0, "questionMapper", (Object) questionMapper0);
      Long long0 = new Long((-451L));
      Integer integer0 = new Integer((-1));
      PaginationDTO paginationDTO0 = questionService0.list(long0, integer0, integer0);
      assertFalse(paginationDTO0.isShowEndPage());
      assertEquals((-619), (int)paginationDTO0.getPage());
  }
  @Test(timeout = 4000)
  public void test_list_14()  throws Throwable  {
      QuestionService questionService0 = new QuestionService();
      QuestionCache questionCache0 = new QuestionCache();

      //prepare data for questionExtMapper0
      Integer integer0 = new Integer(2013);
      ArrayList<Question> arrayList0 = new ArrayList<Question>();
      Question question0 = mock(Question.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      arrayList0.add(question0);
      QuestionExtMapper questionExtMapper0 = mock(QuestionExtMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(questionExtMapper0).countBySearch(nullable(life.majiang.community.dto.QuestionQueryDTO.class));
      doReturn(arrayList0).when(questionExtMapper0).selectBySearch(nullable(life.majiang.community.dto.QuestionQueryDTO.class));
      UserMapper userMapper0 = mock(UserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //invoke method for questionService0
      PrivateAccess.setVariable((Class<?>) QuestionService.class, questionService0, "userMapper", (Object) userMapper0);

      //invoke method for questionService0
      PrivateAccess.setVariable((Class<?>) QuestionService.class, questionService0, "questionExtMapper", (Object) questionExtMapper0);

      //invoke method for questionService0
      PrivateAccess.setVariable((Class<?>) QuestionService.class, questionService0, "questionCache", (Object) questionCache0);
      PaginationDTO paginationDTO0 = questionService0.list("", "id not in", "", integer0, integer0);
      assertFalse(paginationDTO0.isShowFirstPage());
  }
  @Test(timeout = 4000)
  public void test_list_15()  throws Throwable  {
      QuestionService questionService0 = new QuestionService();
      QuestionCache questionCache0 = new QuestionCache();

      //prepare data for questionExtMapper0
      Integer integer0 = new Integer((-1));
      Stack<Question> stack0 = new Stack<Question>();
      Question question0 = new Question();
      stack0.add(question0);
      QuestionExtMapper questionExtMapper0 = mock(QuestionExtMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(questionExtMapper0).countBySearch(nullable(life.majiang.community.dto.QuestionQueryDTO.class));
      doReturn(stack0).when(questionExtMapper0).selectBySearch(nullable(life.majiang.community.dto.QuestionQueryDTO.class));

      //prepare data for userMapper0
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      UserMapper userMapper0 = mock(UserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(user0).when(userMapper0).selectByPrimaryKey(nullable(java.lang.Long.class));

      //invoke method for questionService0
      PrivateAccess.setVariable((Class<?>) QuestionService.class, questionService0, "userMapper", (Object) userMapper0);

      //invoke method for questionService0
      PrivateAccess.setVariable((Class<?>) QuestionService.class, questionService0, "questionExtMapper", (Object) questionExtMapper0);

      //invoke method for questionService0
      PrivateAccess.setVariable((Class<?>) QuestionService.class, questionService0, "questionCache", (Object) questionCache0);
      PaginationDTO paginationDTO0 = questionService0.list("2012", "HOT30", "HOT30", integer0, integer0);
      assertEquals(1, (int)paginationDTO0.getTotalPage());
  }
  @Test(timeout = 4000)
  public void test_list_16()  throws Throwable  {
      QuestionService questionService0 = new QuestionService();
      QuestionCache questionCache0 = mock(QuestionCache.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //prepare data for questionExtMapper0
      Integer integer0 = Integer.valueOf("-1117091713");
      Vector<Question> vector0 = new Vector<Question>(432, 445);
      Question question0 = mock(Question.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      vector0.add(question0);
      QuestionExtMapper questionExtMapper0 = mock(QuestionExtMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(questionExtMapper0).countBySearch(nullable(life.majiang.community.dto.QuestionQueryDTO.class));
      doReturn(vector0).when(questionExtMapper0).selectBySearch(nullable(life.majiang.community.dto.QuestionQueryDTO.class));
      UserMapper userMapper0 = mock(UserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //invoke method for questionService0
      PrivateAccess.setVariable((Class<?>) QuestionService.class, questionService0, "userMapper", (Object) userMapper0);

      //invoke method for questionService0
      PrivateAccess.setVariable((Class<?>) QuestionService.class, questionService0, "questionExtMapper", (Object) questionExtMapper0);

      //invoke method for questionService0
      PrivateAccess.setVariable((Class<?>) QuestionService.class, questionService0, "questionCache", (Object) questionCache0);
      Integer integer1 = new Integer((-1));
      PaginationDTO paginationDTO0 = questionService0.list("}ubE)H:*;", "*", "1", integer0, integer1);
      assertTrue(paginationDTO0.isShowNext());
  }
  @Test(timeout = 4000)
  public void test_list_17()  throws Throwable  {
      QuestionService questionService0 = new QuestionService();

      //prepare data for questionCache0
      ArrayList<QuestionDTO> arrayList0 = new ArrayList<QuestionDTO>();
      QuestionDTO questionDTO0 = mock(QuestionDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      arrayList0.add(questionDTO0);
      QuestionCache questionCache0 = mock(QuestionCache.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(questionCache0).getStickies();

      //prepare data for questionExtMapper0
      Integer integer0 = new Integer((-24));
      LinkedList<Question> linkedList0 = new LinkedList<Question>();
      Long long0 = new Long(275L);
      Question question0 = mock(Question.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(question0).getCommentCount();
      doReturn(long0, long0).when(question0).getCreator();
      doReturn("HOT30").when(question0).getDescription();
      doReturn(long0).when(question0).getGmtCreate();
      doReturn(long0).when(question0).getGmtModified();
      doReturn(long0).when(question0).getId();
      doReturn(integer0).when(question0).getLikeCount();
      doReturn(integer0).when(question0).getSticky();
      doReturn("?").when(question0).getTag();
      doReturn("HOT7").when(question0).getTitle();
      doReturn(integer0).when(question0).getViewCount();
      linkedList0.add(question0);
      QuestionExtMapper questionExtMapper0 = mock(QuestionExtMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(questionExtMapper0).countBySearch(nullable(life.majiang.community.dto.QuestionQueryDTO.class));
      doReturn(linkedList0).when(questionExtMapper0).selectBySearch(nullable(life.majiang.community.dto.QuestionQueryDTO.class));

      //prepare data for userMapper0
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      UserMapper userMapper0 = mock(UserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(user0).when(userMapper0).selectByPrimaryKey(nullable(java.lang.Long.class));

      //invoke method for questionService0
      PrivateAccess.setVariable((Class<?>) QuestionService.class, questionService0, "userMapper", (Object) userMapper0);

      //invoke method for questionService0
      PrivateAccess.setVariable((Class<?>) QuestionService.class, questionService0, "questionExtMapper", (Object) questionExtMapper0);

      //invoke method for questionService0
      PrivateAccess.setVariable((Class<?>) QuestionService.class, questionService0, "questionCache", (Object) questionCache0);
      PaginationDTO paginationDTO0 = questionService0.list("life.majiang.community.model.Question", "lQ$j4374HV0", "1.0", integer0, integer0);
      assertFalse(paginationDTO0.isShowNext());
  }
  @Test(timeout = 4000)
  public void test_list_18()  throws Throwable  {
      QuestionService questionService0 = new QuestionService();
      QuestionCache questionCache0 = new QuestionCache();

      //prepare data for questionExtMapper0
      Integer integer0 = new Integer(1);
      Stack<Question> stack0 = new Stack<Question>();
      Question question0 = mock(Question.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      stack0.add(question0);
      QuestionExtMapper questionExtMapper0 = mock(QuestionExtMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(questionExtMapper0).countBySearch(nullable(life.majiang.community.dto.QuestionQueryDTO.class));
      doReturn(stack0).when(questionExtMapper0).selectBySearch(nullable(life.majiang.community.dto.QuestionQueryDTO.class));
      UserMapper userMapper0 = mock(UserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //invoke method for questionService0
      PrivateAccess.setVariable((Class<?>) QuestionService.class, questionService0, "userMapper", (Object) userMapper0);

      //invoke method for questionService0
      PrivateAccess.setVariable((Class<?>) QuestionService.class, questionService0, "questionExtMapper", (Object) questionExtMapper0);

      //invoke method for questionService0
      PrivateAccess.setVariable((Class<?>) QuestionService.class, questionService0, "questionCache", (Object) questionCache0);
      Integer integer1 = new Integer((-1));
      PaginationDTO paginationDTO0 = questionService0.list("life.majiang.community.model.Question", "lQ$j4374HV0", "1.0", integer1, integer1);
      assertFalse(paginationDTO0.isShowEndPage());
  }
  @Test(timeout = 4000)
  public void test_list_19()  throws Throwable  {
      QuestionService questionService0 = new QuestionService();

      //prepare data for questionCache0
      Vector<QuestionDTO> vector0 = new Vector<QuestionDTO>();
      QuestionDTO questionDTO0 = mock(QuestionDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(",").when(questionDTO0).toString();
      vector0.add(questionDTO0);
      QuestionCache questionCache0 = mock(QuestionCache.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(questionCache0).getStickies();

      //prepare data for questionExtMapper0
      Integer integer0 = new Integer(3932);
      ArrayList<Question> arrayList0 = new ArrayList<Question>();
      Long long0 = new Long(0L);
      Question question0 = mock(Question.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(question0).getCommentCount();
      doReturn(long0, long0).when(question0).getCreator();
      doReturn(" ").when(question0).getDescription();
      doReturn(long0).when(question0).getGmtCreate();
      doReturn(long0).when(question0).getGmtModified();
      doReturn(long0).when(question0).getId();
      doReturn(integer0).when(question0).getLikeCount();
      doReturn(integer0).when(question0).getSticky();
      doReturn("HOT30").when(question0).getTag();
      doReturn(" ").when(question0).getTitle();
      doReturn(integer0).when(question0).getViewCount();
      arrayList0.add(question0);
      QuestionExtMapper questionExtMapper0 = mock(QuestionExtMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(questionExtMapper0).countBySearch(nullable(life.majiang.community.dto.QuestionQueryDTO.class));
      doReturn(arrayList0).when(questionExtMapper0).selectBySearch(nullable(life.majiang.community.dto.QuestionQueryDTO.class));

      //prepare data for userMapper0
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("HOT30").when(user0).toString();
      UserMapper userMapper0 = mock(UserMapper.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(user0).when(userMapper0).selectByPrimaryKey(nullable(java.lang.Long.class));

      //invoke method for questionService0
      PrivateAccess.setVariable((Class<?>) QuestionService.class, questionService0, "userMapper", (Object) userMapper0);

      //invoke method for questionService0
      PrivateAccess.setVariable((Class<?>) QuestionService.class, questionService0, "questionExtMapper", (Object) questionExtMapper0);

      //invoke method for questionService0
      PrivateAccess.setVariable((Class<?>) QuestionService.class, questionService0, "questionCache", (Object) questionCache0);
      Integer integer1 = new Integer((-1));
      PaginationDTO paginationDTO0 = questionService0.list("0", "lQ$j4374HV0", "1.0", integer1, integer1);
      assertEquals((-3932), (int)paginationDTO0.getPage());
  }}

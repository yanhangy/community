/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.life.majiang.community.dto;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import life.majiang.community.dto.NotificationDTO;
import org.junit.runner.RunWith;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class NotificationDTO_SSTest extends NotificationDTO_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_setStatus_00()  throws Throwable  {
      NotificationDTO notificationDTO0 = new NotificationDTO();
      Integer integer0 = new Integer(0);

      //invoke method for notificationDTO0
      notificationDTO0.setStatus(integer0);

      //invoke method for notificationDTO0
      assertNull(notificationDTO0.getOuterTitle());
  }
  @Test(timeout = 4000)
  public void test_setGmtCreate_01()  throws Throwable  {
      NotificationDTO notificationDTO0 = new NotificationDTO();
      Long long0 = new Long(0L);

      //invoke method for notificationDTO0
      notificationDTO0.setGmtCreate(long0);

      //invoke method for notificationDTO0
      assertEquals(0L, (long)notificationDTO0.getGmtCreate());
  }
  @Test(timeout = 4000)
  public void test_setOuterid_02()  throws Throwable  {
      NotificationDTO notificationDTO0 = new NotificationDTO();
      Long long0 = new Long(1L);

      //invoke method for notificationDTO0
      notificationDTO0.setOuterid(long0);

      //invoke method for notificationDTO0
      assertNull(notificationDTO0.getTypeName());
  }
  @Test(timeout = 4000)
  public void test_setId_03()  throws Throwable  {
      NotificationDTO notificationDTO0 = new NotificationDTO();
      Long long0 = new Long(2432L);

      //invoke method for notificationDTO0
      notificationDTO0.setId(long0);

      //invoke method for notificationDTO0
      assertNull(notificationDTO0.getTypeName());
  }
  @Test(timeout = 4000)
  public void test_canEqual_04()  throws Throwable  {
      NotificationDTO notificationDTO0 = new NotificationDTO();
      Object object0 = PrivateAccess.callMethod((Class<NotificationDTO>) NotificationDTO.class, notificationDTO0, "canEqual", (Object) "1", (Class<?>) Object.class);
      assertEquals(false, object0);
  }
  @Test(timeout = 4000)
  public void test_setType_05()  throws Throwable  {
      NotificationDTO notificationDTO0 = new NotificationDTO();

      //invoke method for notificationDTO0
      notificationDTO0.getType();

      //invoke method for notificationDTO0
      notificationDTO0.setType((Integer) null);

      //invoke method for notificationDTO0
      assertNull(notificationDTO0.getGmtCreate());
  }
  @Test(timeout = 4000)
  public void test_setNotifierName_06()  throws Throwable  {
      NotificationDTO notificationDTO0 = new NotificationDTO();

      //invoke method for notificationDTO0
      notificationDTO0.getId();

      //invoke method for notificationDTO0
      notificationDTO0.setNotifierName("1");

      //invoke method for notificationDTO0
      assertNull(notificationDTO0.getGmtCreate());
  }
  @Test(timeout = 4000)
  public void test_setOuterTitle_07()  throws Throwable  {
      NotificationDTO notificationDTO0 = new NotificationDTO();

      //invoke method for notificationDTO0
      notificationDTO0.getOuterid();

      //invoke method for notificationDTO0
      notificationDTO0.setOuterTitle(", status=");

      //invoke method for notificationDTO0
      assertNull(notificationDTO0.getNotifier());
  }
  @Test(timeout = 4000)
  public void test_setNotifier_08()  throws Throwable  {
      NotificationDTO notificationDTO0 = new NotificationDTO();

      //invoke method for notificationDTO0
      notificationDTO0.getNotifier();

      //invoke method for notificationDTO0
      notificationDTO0.setNotifier((Long) null);

      //invoke method for notificationDTO0
      assertNull(notificationDTO0.getId());
  }
  @Test(timeout = 4000)
  public void test_equals_09()  throws Throwable  {
      NotificationDTO notificationDTO0 = new NotificationDTO();

      //invoke method for notificationDTO0
      notificationDTO0.getStatus();

      //invoke method for notificationDTO0
      notificationDTO0.getGmtCreate();
      boolean boolean0 = notificationDTO0.equals(",p");
      assertFalse(boolean0);
  }
  @Test(timeout = 4000)
  public void test_hashCode_10()  throws Throwable  {
      NotificationDTO notificationDTO0 = new NotificationDTO();

      //invoke method for notificationDTO0
      notificationDTO0.hashCode();
  }
  @Test(timeout = 4000)
  public void test_hashCode_11()  throws Throwable  {
      NotificationDTO notificationDTO0 = new NotificationDTO();

      //invoke method for notificationDTO0
      notificationDTO0.getNotifier();

      //invoke method for notificationDTO0
      notificationDTO0.hashCode();
  }
  @Test(timeout = 4000)
  public void test_hashCode_12()  throws Throwable  {
      NotificationDTO notificationDTO0 = new NotificationDTO();

      //invoke method for notificationDTO0
      notificationDTO0.getStatus();

      //invoke method for notificationDTO0
      notificationDTO0.getOuterid();

      //invoke method for notificationDTO0
      notificationDTO0.getNotifier();

      //invoke method for notificationDTO0
      notificationDTO0.hashCode();
  }
  @Test(timeout = 4000)
  public void test_toString_13()  throws Throwable  {
      NotificationDTO notificationDTO0 = new NotificationDTO();

      //invoke method for notificationDTO0
      notificationDTO0.getGmtCreate();
      String string0 = notificationDTO0.toString();
      assertEquals("NotificationDTO(id=null, gmtCreate=null, status=null, notifier=null, notifierName=null, outerTitle=null, outerid=null, typeName=null, type=null)", string0);
  }}

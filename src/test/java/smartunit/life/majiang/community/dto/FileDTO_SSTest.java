/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.life.majiang.community.dto;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import life.majiang.community.dto.FileDTO;
import org.junit.runner.RunWith;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FileDTO_SSTest extends FileDTO_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_setMessage_0()  throws Throwable  {
      FileDTO fileDTO0 = new FileDTO();

      //invoke method for fileDTO0
      fileDTO0.setMessage("1.0");

      //invoke method for fileDTO0
      assertEquals(0, fileDTO0.getSuccess());
  }
  @Test(timeout = 4000)
  public void test_setSuccess_1()  throws Throwable  {
      FileDTO fileDTO0 = new FileDTO();

      //invoke method for fileDTO0
      fileDTO0.setSuccess(1363);

      //invoke method for fileDTO0
      assertEquals(1363, fileDTO0.getSuccess());
  }
  @Test(timeout = 4000)
  public void test_equals_2()  throws Throwable  {
      FileDTO fileDTO0 = new FileDTO();
      boolean boolean0 = fileDTO0.equals("1");
      assertFalse(boolean0);
  }
  @Test(timeout = 4000)
  public void test_canEqual_3()  throws Throwable  {
      FileDTO fileDTO0 = new FileDTO();
      Object object0 = PrivateAccess.callMethod((Class<FileDTO>) FileDTO.class, fileDTO0, "canEqual", (Object) "M", (Class<?>) Object.class);
      assertEquals(false, object0);
  }
  @Test(timeout = 4000)
  public void test_setUrl_4()  throws Throwable  {
      FileDTO fileDTO0 = new FileDTO();

      //invoke method for fileDTO0
      fileDTO0.setUrl("");

      //invoke method for fileDTO0
      assertEquals("", fileDTO0.getUrl());
  }
  @Test(timeout = 4000)
  public void test_toString_5()  throws Throwable  {
      FileDTO fileDTO0 = new FileDTO();
      String string0 = fileDTO0.toString();
      assertEquals("FileDTO(success=0, message=null, url=null)", string0);
  }
  @Test(timeout = 4000)
  public void test_hashCode_6()  throws Throwable  {
      FileDTO fileDTO0 = new FileDTO();

      //invoke method for fileDTO0
      fileDTO0.hashCode();

      //invoke method for fileDTO0
      assertEquals(0, fileDTO0.getSuccess());
  }}

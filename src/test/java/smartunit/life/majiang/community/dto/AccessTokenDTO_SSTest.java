/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.life.majiang.community.dto;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import life.majiang.community.dto.AccessTokenDTO;
import org.junit.runner.RunWith;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AccessTokenDTO_SSTest extends AccessTokenDTO_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_setState_0()  throws Throwable  {
      AccessTokenDTO accessTokenDTO0 = new AccessTokenDTO();

      //invoke method for accessTokenDTO0
      accessTokenDTO0.setState("");

      //invoke method for accessTokenDTO0
      assertNull(accessTokenDTO0.getCode());
  }
  @Test(timeout = 4000)
  public void test_setCode_1()  throws Throwable  {
      AccessTokenDTO accessTokenDTO0 = new AccessTokenDTO();

      //invoke method for accessTokenDTO0
      accessTokenDTO0.setCode("");

      //invoke method for accessTokenDTO0
      assertNull(accessTokenDTO0.getState());
  }
  @Test(timeout = 4000)
  public void test_setClient_secret_2()  throws Throwable  {
      AccessTokenDTO accessTokenDTO0 = new AccessTokenDTO();

      //invoke method for accessTokenDTO0
      accessTokenDTO0.setClient_secret("1");

      //invoke method for accessTokenDTO0
      assertEquals("1", accessTokenDTO0.getClient_secret());
  }
  @Test(timeout = 4000)
  public void test_setClient_id_3()  throws Throwable  {
      AccessTokenDTO accessTokenDTO0 = new AccessTokenDTO();

      //invoke method for accessTokenDTO0
      accessTokenDTO0.setClient_id("1.0");

      //invoke method for accessTokenDTO0
      assertNull(accessTokenDTO0.getClient_secret());
  }
  @Test(timeout = 4000)
  public void test_setRedirect_uri_4()  throws Throwable  {
      AccessTokenDTO accessTokenDTO0 = new AccessTokenDTO();

      //invoke method for accessTokenDTO0
      accessTokenDTO0.setRedirect_uri("");

      //invoke method for accessTokenDTO0
      assertNull(accessTokenDTO0.getCode());
  }
  @Test(timeout = 4000)
  public void test_canEqual_5()  throws Throwable  {
      AccessTokenDTO accessTokenDTO0 = new AccessTokenDTO();
      Object object0 = PrivateAccess.callMethod((Class<AccessTokenDTO>) AccessTokenDTO.class, accessTokenDTO0, "canEqual", (Object) "59", (Class<?>) Object.class);
      assertEquals(false, object0);
  }
  @Test(timeout = 4000)
  public void test_equals_6()  throws Throwable  {
      AccessTokenDTO accessTokenDTO0 = new AccessTokenDTO();
      boolean boolean0 = accessTokenDTO0.equals("kW`Ppb+Pj6L!z^3P\"");
      assertFalse(boolean0);
  }
  @Test(timeout = 4000)
  public void test_toString_7()  throws Throwable  {
      AccessTokenDTO accessTokenDTO0 = new AccessTokenDTO();
      String string0 = accessTokenDTO0.toString();
      assertEquals("AccessTokenDTO(client_id=null, client_secret=null, code=null, redirect_uri=null, state=null)", string0);
  }
  @Test(timeout = 4000)
  public void test_hashCode_8()  throws Throwable  {
      AccessTokenDTO accessTokenDTO0 = new AccessTokenDTO();

      //invoke method for accessTokenDTO0
      accessTokenDTO0.hashCode();
  }}

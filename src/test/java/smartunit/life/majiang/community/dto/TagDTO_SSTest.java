/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.life.majiang.community.dto;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Stack;
import life.majiang.community.dto.TagDTO;
import org.junit.runner.RunWith;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class TagDTO_SSTest extends TagDTO_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_setTags_0()  throws Throwable  {
      TagDTO tagDTO0 = new TagDTO();
      LinkedList<String> linkedList0 = new LinkedList<String>();

      //invoke method for tagDTO0
      tagDTO0.setTags(linkedList0);

      //invoke method for tagDTO0
      assertNull(tagDTO0.getCategoryName());
  }
  @Test(timeout = 4000)
  public void test_setCategoryName_1()  throws Throwable  {
      TagDTO tagDTO0 = new TagDTO();

      //invoke method for tagDTO0
      tagDTO0.setCategoryName("1.0");

      //invoke method for tagDTO0
      assertEquals("1.0", tagDTO0.getCategoryName());
  }
  @Test(timeout = 4000)
  public void test_hashCode_2()  throws Throwable  {
      TagDTO tagDTO0 = new TagDTO();
      Stack<String> stack0 = new Stack<String>();
      LinkedHashSet<TagDTO> linkedHashSet0 = new LinkedHashSet<TagDTO>();
      tagDTO0.equals(tagDTO0);
      linkedHashSet0.add(tagDTO0);
      TagDTO tagDTO1 = new TagDTO();
      linkedHashSet0.add(tagDTO1);
      assertEquals(1, linkedHashSet0.size());
      

      //invoke method for tagDTO0
      PrivateAccess.setVariable((Class<?>) TagDTO.class, tagDTO0, "tags", (Object) stack0);

      //invoke method for tagDTO0
      PrivateAccess.setVariable((Class<?>) TagDTO.class, tagDTO0, "categoryName", (Object) "1");

      //invoke method for tagDTO0
      tagDTO0.hashCode();

      //invoke method for tagDTO1

      //invoke method for tagDTO0
      assertFalse(tagDTO0.equals((Object)tagDTO1));
  }
  @Test(timeout = 4000)
  public void test_hashCode_3()  throws Throwable  {
      TagDTO tagDTO0 = new TagDTO();
      Stack<String> stack0 = new Stack<String>();
      LinkedHashSet<TagDTO> linkedHashSet0 = new LinkedHashSet<TagDTO>();
      linkedHashSet0.add(tagDTO0);
      TagDTO tagDTO1 = new TagDTO();
      linkedHashSet0.add(tagDTO1);
      assertEquals(1, linkedHashSet0.size());
      

      //invoke method for tagDTO0
      PrivateAccess.setVariable((Class<?>) TagDTO.class, tagDTO0, "tags", (Object) stack0);

      //invoke method for tagDTO0
      PrivateAccess.setVariable((Class<?>) TagDTO.class, tagDTO0, "categoryName", (Object) "LE_zPga0Jw`Uo4N");

      //invoke method for tagDTO0
      tagDTO0.hashCode();

      //invoke method for tagDTO1

      //invoke method for tagDTO0
      assertFalse(tagDTO0.equals((Object)tagDTO1));
  }
  @Test(timeout = 4000)
  public void test_hashCode_4()  throws Throwable  {
      TagDTO tagDTO0 = new TagDTO();

      //invoke method for tagDTO0
      tagDTO0.hashCode();
  }
  @Test(timeout = 4000)
  public void test_getCategoryName_5()  throws Throwable  {
      TagDTO tagDTO0 = new TagDTO();
      String string0 = tagDTO0.toString();
      assertEquals("TagDTO(categoryName=null, tags=null)", string0);
  }}

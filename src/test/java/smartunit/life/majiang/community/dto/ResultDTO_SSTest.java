/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.life.majiang.community.dto;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import life.majiang.community.dto.ResultDTO;
import life.majiang.community.exception.CustomizeErrorCode;
import life.majiang.community.exception.CustomizeException;
import life.majiang.community.exception.ICustomizeErrorCode;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ResultDTO_SSTest extends ResultDTO_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_canEqual_0()  throws Throwable  {
      ResultDTO<Object> resultDTO0 = new ResultDTO<Object>();
      ResultDTO<ResultDTO<String>> resultDTO1 = new ResultDTO<ResultDTO<String>>();

      //invoke method for resultDTO1
      resultDTO1.getData();
      Object object0 = PrivateAccess.callMethod((Class<ResultDTO>) ResultDTO.class, (ResultDTO) resultDTO0, "canEqual", (Object) null, (Class<?>) Object.class);
      assertEquals(false, object0);
  }
  @Test(timeout = 4000)
  public void test_equals_1()  throws Throwable  {
      ResultDTO<String> resultDTO0 = new ResultDTO<String>();

      //invoke method for resultDTO0
      resultDTO0.getCode();
      boolean boolean0 = resultDTO0.equals("=");
      assertFalse(boolean0);
  }
  @Test(timeout = 4000)
  public void test_toString_2()  throws Throwable  {
      ResultDTO<Object> resultDTO0 = new ResultDTO<Object>();
      String string0 = resultDTO0.toString();
      assertEquals("ResultDTO(code=null, message=null, data=null)", string0);
  }
  @Test(timeout = 4000)
  public void test_hashCode_3()  throws Throwable  {
      ResultDTO<String> resultDTO0 = new ResultDTO<String>();

      //invoke method for resultDTO0
      resultDTO0.hashCode();
  }
  @Test(timeout = 4000)
  public void test_hashCode_4()  throws Throwable  {
      ResultDTO<String> resultDTO0 = new ResultDTO<String>();

      //invoke method for resultDTO0
      resultDTO0.getCode();

      //invoke method for resultDTO0
      resultDTO0.hashCode();
  }
  @Test(timeout = 4000)
  public void test_okOf_5()  throws Throwable  {
      ResultDTO<Object> resultDTO0 = new ResultDTO<Object>();
      ResultDTO resultDTO1 = ResultDTO.okOf();

      //invoke method for resultDTO1
      assertEquals(200, (int)resultDTO1.getCode());

      //invoke method for resultDTO1
      assertEquals("\u8BF7\u6C42\u6210\u529F", resultDTO1.getMessage());
  }
  @Test(timeout = 4000)
  public void test_okOf_6()  throws Throwable  {
      ResultDTO<Object> resultDTO0 = new ResultDTO<Object>();
      ResultDTO resultDTO1 = ResultDTO.okOf(resultDTO0);

      //invoke method for resultDTO1
      assertEquals(200, (int)resultDTO1.getCode());

      //invoke method for resultDTO1
      assertEquals("\u8BF7\u6C42\u6210\u529F", resultDTO1.getMessage());
  }
  @Test(timeout = 4000)
  public void test_errorOf_7()  throws Throwable  {
      ResultDTO<String> resultDTO0 = new ResultDTO<String>();

      //prepare data for iCustomizeErrorCode0
      Integer integer0 = new Integer(43);
      ICustomizeErrorCode iCustomizeErrorCode0 = mock(ICustomizeErrorCode.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(iCustomizeErrorCode0).getCode();
      doReturn("Functions.forPredicate(").when(iCustomizeErrorCode0).getMessage();
      CustomizeException customizeException0 = new CustomizeException(iCustomizeErrorCode0);
      ResultDTO resultDTO1 = ResultDTO.errorOf(customizeException0);

      //invoke method for resultDTO1
      assertEquals("Functions.forPredicate(", resultDTO1.getMessage());
  }
  @Test(timeout = 4000)
  public void test_errorOf_8()  throws Throwable  {
      ResultDTO<Object> resultDTO0 = new ResultDTO<Object>();
      CustomizeErrorCode customizeErrorCode0 = CustomizeErrorCode.USER_DISABLE;
      ResultDTO resultDTO1 = ResultDTO.errorOf(customizeErrorCode0);

      //invoke method for resultDTO1
      assertEquals("\u64CD\u4F5C\u88AB\u7981\u7528\uFF0C\u5982\u6709\u7591\u95EE\u8BF7\u8054\u7CFB\u7BA1\u7406\u5458", resultDTO1.getMessage());
  }}

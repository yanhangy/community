/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.life.majiang.community.dto;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import life.majiang.community.dto.QuestionDTO;
import life.majiang.community.model.User;
import org.junit.runner.RunWith;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class QuestionDTO_SSTest extends QuestionDTO_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_canEqual_00()  throws Throwable  {
      QuestionDTO questionDTO0 = new QuestionDTO();
      Object object0 = new Object();
      Object object1 = PrivateAccess.callMethod((Class<QuestionDTO>) QuestionDTO.class, questionDTO0, "canEqual", object0, (Class<?>) Object.class);
      assertEquals(false, object1);
  }
  @Test(timeout = 4000)
  public void test_setSticky_01()  throws Throwable  {
      QuestionDTO questionDTO0 = new QuestionDTO();
      Integer integer0 = new Integer(1419);

      //invoke method for questionDTO0
      questionDTO0.setSticky(integer0);

      //invoke method for questionDTO0
      assertNull(questionDTO0.getCommentCount());
  }
  @Test(timeout = 4000)
  public void test_setId_02()  throws Throwable  {
      QuestionDTO questionDTO0 = new QuestionDTO();
      Long long0 = new Long(0L);

      //invoke method for questionDTO0
      questionDTO0.setId(long0);

      //invoke method for questionDTO0
      assertNull(questionDTO0.getCommentCount());
  }
  @Test(timeout = 4000)
  public void test_setGmtModified_03()  throws Throwable  {
      QuestionDTO questionDTO0 = new QuestionDTO();
      Long long0 = new Long(13L);

      //invoke method for questionDTO0
      questionDTO0.setGmtModified(long0);

      //invoke method for questionDTO0
      assertNull(questionDTO0.getViewCount());
  }
  @Test(timeout = 4000)
  public void test_setCommentCount_04()  throws Throwable  {
      QuestionDTO questionDTO0 = new QuestionDTO();
      Integer integer0 = new Integer(1102);

      //invoke method for questionDTO0
      questionDTO0.getGmtCreate();

      //invoke method for questionDTO0
      questionDTO0.setCommentCount(integer0);

      //invoke method for questionDTO0
      assertNull(questionDTO0.getTag());
  }
  @Test(timeout = 4000)
  public void test_setUser_05()  throws Throwable  {
      QuestionDTO questionDTO0 = new QuestionDTO();
      User user0 = new User();
      questionDTO0.getCreator();
      questionDTO0.setUser(user0);
      assertNull(user0.getId());
  }
  @Test(timeout = 4000)
  public void test_setViewCount_06()  throws Throwable  {
      QuestionDTO questionDTO0 = new QuestionDTO();
      Integer integer0 = new Integer(43);

      //invoke method for questionDTO0
      questionDTO0.getUser();

      //invoke method for questionDTO0
      questionDTO0.setViewCount(integer0);

      //invoke method for questionDTO0
      assertNull(questionDTO0.getId());
  }
  @Test(timeout = 4000)
  public void test_setTitle_07()  throws Throwable  {
      QuestionDTO questionDTO0 = new QuestionDTO();

      //invoke method for questionDTO0
      questionDTO0.getSticky();

      //invoke method for questionDTO0
      questionDTO0.setTitle(")tg*.Y!N1-}9E^M~");

      //invoke method for questionDTO0
      assertNull(questionDTO0.getId());
  }
  @Test(timeout = 4000)
  public void test_setDescription_08()  throws Throwable  {
      QuestionDTO questionDTO0 = new QuestionDTO();

      //invoke method for questionDTO0
      questionDTO0.getLikeCount();

      //invoke method for questionDTO0
      questionDTO0.setDescription("43");

      //invoke method for questionDTO0
      assertEquals("43", questionDTO0.getDescription());
  }
  @Test(timeout = 4000)
  public void test_setCreator_09()  throws Throwable  {
      QuestionDTO questionDTO0 = new QuestionDTO();
      Long long0 = questionDTO0.getId();

      //invoke method for questionDTO0
      questionDTO0.getGmtCreate();

      //invoke method for questionDTO0
      questionDTO0.setCreator(long0);

      //invoke method for questionDTO0
      assertNull(questionDTO0.getSticky());
  }
  @Test(timeout = 4000)
  public void test_setTag_10()  throws Throwable  {
      QuestionDTO questionDTO0 = new QuestionDTO();

      //invoke method for questionDTO0
      questionDTO0.getViewCount();

      //invoke method for questionDTO0
      questionDTO0.getGmtModified();

      //invoke method for questionDTO0
      questionDTO0.getUser();

      //invoke method for questionDTO0
      questionDTO0.setTag("");

      //invoke method for questionDTO0
      assertNull(questionDTO0.getDescription());
  }
  @Test(timeout = 4000)
  public void test_equals_11()  throws Throwable  {
      QuestionDTO questionDTO0 = new QuestionDTO();

      //invoke method for questionDTO0
      questionDTO0.getCommentCount();

      //invoke method for questionDTO0
      questionDTO0.getCreator();

      //invoke method for questionDTO0
      questionDTO0.getId();

      //invoke method for questionDTO0
      questionDTO0.getUser();
      boolean boolean0 = questionDTO0.equals("1");
      assertFalse(boolean0);
  }
  @Test(timeout = 4000)
  public void test_hashCode_12()  throws Throwable  {
      QuestionDTO questionDTO0 = new QuestionDTO();

      //invoke method for questionDTO0
      questionDTO0.getSticky();

      //invoke method for questionDTO0
      questionDTO0.getViewCount();

      //invoke method for questionDTO0
      questionDTO0.getId();

      //invoke method for questionDTO0
      questionDTO0.hashCode();
  }
  @Test(timeout = 4000)
  public void test_hashCode_13()  throws Throwable  {
      QuestionDTO questionDTO0 = new QuestionDTO();

      //invoke method for questionDTO0
      questionDTO0.getLikeCount();

      //invoke method for questionDTO0
      questionDTO0.getId();

      //invoke method for questionDTO0
      questionDTO0.getUser();

      //invoke method for questionDTO0
      questionDTO0.hashCode();
  }
  @Test(timeout = 4000)
  public void test_hashCode_14()  throws Throwable  {
      QuestionDTO questionDTO0 = new QuestionDTO();

      //invoke method for questionDTO0
      questionDTO0.getCommentCount();

      //invoke method for questionDTO0
      questionDTO0.getLikeCount();

      //invoke method for questionDTO0
      questionDTO0.getId();

      //invoke method for questionDTO0
      questionDTO0.getGmtModified();

      //invoke method for questionDTO0
      questionDTO0.getUser();

      //invoke method for questionDTO0
      questionDTO0.hashCode();
  }
  @Test(timeout = 4000)
  public void test_toString_15()  throws Throwable  {
      QuestionDTO questionDTO0 = new QuestionDTO();
      String string0 = questionDTO0.toString();
      assertEquals("QuestionDTO(id=null, title=null, description=null, tag=null, gmtCreate=null, gmtModified=null, creator=null, viewCount=null, commentCount=null, likeCount=null, user=null, sticky=null)", string0);
  }}

/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.life.majiang.community.dto;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import life.majiang.community.dto.CommentDTO;
import life.majiang.community.model.User;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CommentDTO_SSTest extends CommentDTO_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_setGmtCreate_00()  throws Throwable  {
      CommentDTO commentDTO0 = new CommentDTO();
      Long long0 = new Long(2824L);

      //invoke method for commentDTO0
      commentDTO0.setGmtCreate(long0);

      //invoke method for commentDTO0
      assertNull(commentDTO0.getCommentator());
  }
  @Test(timeout = 4000)
  public void test_setLikeCount_01()  throws Throwable  {
      CommentDTO commentDTO0 = new CommentDTO();
      Long long0 = new Long((-1L));

      //invoke method for commentDTO0
      commentDTO0.setLikeCount(long0);

      //invoke method for commentDTO0
      assertNull(commentDTO0.getContent());
  }
  @Test(timeout = 4000)
  public void test_setId_02()  throws Throwable  {
      CommentDTO commentDTO0 = new CommentDTO();
      Long long0 = new Long(1639L);

      //invoke method for commentDTO0
      commentDTO0.setId(long0);

      //invoke method for commentDTO0
      assertNull(commentDTO0.getGmtCreate());
  }
  @Test(timeout = 4000)
  public void test_setParentId_03()  throws Throwable  {
      CommentDTO commentDTO0 = new CommentDTO();
      Long long0 = new Long(1524L);

      //invoke method for commentDTO0
      commentDTO0.setParentId(long0);

      //invoke method for commentDTO0
      assertNull(commentDTO0.getGmtModified());
  }
  @Test(timeout = 4000)
  public void test_setType_04()  throws Throwable  {
      CommentDTO commentDTO0 = new CommentDTO();
      Integer integer0 = new Integer(0);

      //invoke method for commentDTO0
      commentDTO0.setType(integer0);

      //invoke method for commentDTO0
      assertNull(commentDTO0.getGmtCreate());
  }
  @Test(timeout = 4000)
  public void test_setContent_05()  throws Throwable  {
      CommentDTO commentDTO0 = new CommentDTO();

      //invoke method for commentDTO0
      commentDTO0.getParentId();

      //invoke method for commentDTO0
      commentDTO0.setContent("");

      //invoke method for commentDTO0
      assertNull(commentDTO0.getCommentator());
  }
  @Test(timeout = 4000)
  public void test_setGmtModified_06()  throws Throwable  {
      CommentDTO commentDTO0 = new CommentDTO();
      Long long0 = new Long(3242L);

      //invoke method for commentDTO0
      commentDTO0.getUser();

      //invoke method for commentDTO0
      commentDTO0.setGmtModified(long0);

      //invoke method for commentDTO0
      assertNull(commentDTO0.getId());
  }
  @Test(timeout = 4000)
  public void test_setCommentCount_07()  throws Throwable  {
      CommentDTO commentDTO0 = new CommentDTO();
      Integer integer0 = new Integer(43);

      //invoke method for commentDTO0
      commentDTO0.getLikeCount();

      //invoke method for commentDTO0
      commentDTO0.setCommentCount(integer0);

      //invoke method for commentDTO0
      assertEquals(43, (int)commentDTO0.getCommentCount());
  }
  @Test(timeout = 4000)
  public void test_setUser_08()  throws Throwable  {
      CommentDTO commentDTO0 = new CommentDTO();

      //invoke method for commentDTO0
      commentDTO0.getLikeCount();

      //invoke method for commentDTO0
      commentDTO0.getCommentator();

      //invoke method for commentDTO0
      commentDTO0.getUser();

      //invoke method for commentDTO0
      commentDTO0.setUser((User) null);

      //invoke method for commentDTO0
      assertNull(commentDTO0.getId());
  }
  @Test(timeout = 4000)
  public void test_equals_09()  throws Throwable  {
      CommentDTO commentDTO0 = new CommentDTO();

      //invoke method for commentDTO0
      commentDTO0.getCommentCount();

      //invoke method for commentDTO0
      commentDTO0.getId();

      //invoke method for commentDTO0
      commentDTO0.getLikeCount();
      boolean boolean0 = commentDTO0.equals("hR");
      assertFalse(boolean0);
  }
  @Test(timeout = 4000)
  public void test_toString_10()  throws Throwable  {
      CommentDTO commentDTO0 = new CommentDTO();
      String string0 = commentDTO0.toString();
      assertEquals("CommentDTO(id=null, parentId=null, type=null, commentator=null, gmtCreate=null, gmtModified=null, likeCount=null, commentCount=null, content=null, user=null)", string0);
  }
  @Test(timeout = 4000)
  public void test_hashCode_11()  throws Throwable  {
      CommentDTO commentDTO0 = new CommentDTO();

      //invoke method for commentDTO0
      commentDTO0.getCommentCount();

      //invoke method for commentDTO0
      commentDTO0.getUser();

      //invoke method for commentDTO0
      commentDTO0.hashCode();
  }
  @Test(timeout = 4000)
  public void test_hashCode_12()  throws Throwable  {
      CommentDTO commentDTO0 = new CommentDTO();

      //invoke method for commentDTO0
      commentDTO0.getGmtModified();

      //invoke method for commentDTO0
      commentDTO0.hashCode();
  }
  @Test(timeout = 4000)
  public void test_hashCode_13()  throws Throwable  {
      CommentDTO commentDTO0 = new CommentDTO();

      //invoke method for commentDTO0
      commentDTO0.getCommentCount();

      //invoke method for commentDTO0
      commentDTO0.getCommentator();

      //invoke method for commentDTO0
      commentDTO0.getId();

      //invoke method for commentDTO0
      commentDTO0.getGmtModified();

      //invoke method for commentDTO0
      commentDTO0.hashCode();
  }}

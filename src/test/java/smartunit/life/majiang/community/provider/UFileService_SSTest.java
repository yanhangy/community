/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.life.majiang.community.provider;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import java.io.InputStream;
import java.io.PipedInputStream;
import life.majiang.community.provider.UFileProperties;
import life.majiang.community.provider.UFileResult;
import life.majiang.community.provider.UFileService;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class UFileService_SSTest extends UFileService_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_upload_00()  throws Throwable  {
      UFileService uFileService0 = new UFileService();
      // Undeclared exception!
      try { 

        //invoke method for uFileService0
        uFileService0.upload("1.0");
      
      } catch(Throwable e) {
         //
         // Exception Name: AssertionError
         // no message in exception (getMessage() returned null)
         //
      }
  }
  @Test(timeout = 4000)
  public void test_upload_01()  throws Throwable  {
      UFileService uFileService0 = new UFileService();
      UFileProperties uFileProperties0 = new UFileProperties();

      //invoke method for uFileService0
      PrivateAccess.setVariable((Class<?>) UFileService.class, uFileService0, "uFileProperties", (Object) uFileProperties0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      UFileResult uFileResult0 = uFileService0.upload((InputStream) pipedInputStream0, "ucloud.ufile.privateKey is missing.", "ucloud.ufile.privateKey is missing.");
      assertNull(uFileResult0);
  }
  @Test(timeout = 4000)
  public void test_upload_02()  throws Throwable  {
      UFileService uFileService0 = new UFileService();
      UFileProperties uFileProperties0 = new UFileProperties();

      //invoke method for uFileService0
      PrivateAccess.setVariable((Class<?>) UFileService.class, uFileService0, "uFileProperties", (Object) uFileProperties0);
      UFileResult uFileResult0 = uFileService0.exchangeFileUrl("ucloud.uile.downloadDomain is missing, eg.bcketname.cn-bj.ufileos.com.");
      assertNull(uFileResult0);
  }
  @Test(timeout = 4000)
  public void test_upload_03()  throws Throwable  {
      UFileService uFileService0 = new UFileService();

      //prepare data for uFileProperties0
      UFileProperties uFileProperties0 = mock(UFileProperties.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("Ta>^*$fs2IVJ4").when(uFileProperties0).getPublicKey();

      //invoke method for uFileService0
      PrivateAccess.setVariable((Class<?>) UFileService.class, uFileService0, "uFileProperties", (Object) uFileProperties0);
      InputStream inputStream0 = mock(InputStream.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      UFileResult uFileResult0 = uFileService0.upload(inputStream0, " is not a directory", "image/png");
      assertNull(uFileResult0);
  }
  @Test(timeout = 4000)
  public void test_exchangeFileUrl_04()  throws Throwable  {
      UFileService uFileService0 = new UFileService();

      //prepare data for uFileProperties0
      UFileProperties uFileProperties0 = mock(UFileProperties.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("/]UPCzI?tdi,%AD").when(uFileProperties0).getPublicKey();

      //invoke method for uFileService0
      PrivateAccess.setVariable((Class<?>) UFileService.class, uFileService0, "uFileProperties", (Object) uFileProperties0);
      UFileResult uFileResult0 = uFileService0.exchangeFileUrl("h#9Zsj");
      assertNull(uFileResult0);
  }
  @Test(timeout = 4000)
  public void test_upload_05()  throws Throwable  {
      UFileService uFileService0 = new UFileService();

      //prepare data for uFileProperties0
      UFileProperties uFileProperties0 = mock(UFileProperties.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("16").when(uFileProperties0).getPrivateKey();
      doReturn("life.majiang.community.provider.UFileService").when(uFileProperties0).getPublicKey();

      //invoke method for uFileService0
      PrivateAccess.setVariable((Class<?>) UFileService.class, uFileService0, "uFileProperties", (Object) uFileProperties0);
      InputStream inputStream0 = mock(InputStream.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      UFileResult uFileResult0 = uFileService0.upload(inputStream0, "Failed to list contents of ", "max < 1: ");
      assertNull(uFileResult0);
  }
  @Test(timeout = 4000)
  public void test_exchangeFileUrl_06()  throws Throwable  {
      UFileService uFileService0 = new UFileService();

      //prepare data for uFileProperties0
      UFileProperties uFileProperties0 = mock(UFileProperties.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("ucloud.ufile.bucketName is missing.").when(uFileProperties0).getPrivateKey();
      doReturn("upload error,{}").when(uFileProperties0).getPublicKey();

      //invoke method for uFileService0
      PrivateAccess.setVariable((Class<?>) UFileService.class, uFileService0, "uFileProperties", (Object) uFileProperties0);
      UFileResult uFileResult0 = uFileService0.exchangeFileUrl("1.0");
      assertNull(uFileResult0);
  }
  @Test(timeout = 4000)
  public void test_upload_07()  throws Throwable  {
      UFileService uFileService0 = new UFileService();

      //prepare data for uFileProperties0
      UFileProperties uFileProperties0 = mock(UFileProperties.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("0").when(uFileProperties0).getPrivateKey();
      doReturn("ucloud.ufile.privateKey is missing.").when(uFileProperties0).getPublicKey();
      doReturn("1").when(uFileProperties0).getUploadDomain();

      //invoke method for uFileService0
      PrivateAccess.setVariable((Class<?>) UFileService.class, uFileService0, "uFileProperties", (Object) uFileProperties0);
      InputStream inputStream0 = mock(InputStream.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      UFileResult uFileResult0 = uFileService0.upload(inputStream0, "cn.ucloud.ufile.auth.ObjectBaseAuthParam", "ucloud.ufile.publicKey is missing.");
      assertNull(uFileResult0);
  }
  @Test(timeout = 4000)
  public void test_exchangeFileUrl_08()  throws Throwable  {
      UFileService uFileService0 = new UFileService();

      //prepare data for uFileProperties0
      UFileProperties uFileProperties0 = mock(UFileProperties.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1.0").when(uFileProperties0).getPrivateKey();
      doReturn("C@*XkJSdhl@{~").when(uFileProperties0).getPublicKey();
      doReturn("?I%c").when(uFileProperties0).getUploadDomain();

      //invoke method for uFileService0
      PrivateAccess.setVariable((Class<?>) UFileService.class, uFileService0, "uFileProperties", (Object) uFileProperties0);
      UFileResult uFileResult0 = uFileService0.exchangeFileUrl("new file exception");
      assertNull(uFileResult0);
  }
  @Test(timeout = 4000)
  public void test_upload_09()  throws Throwable  {
      UFileService uFileService0 = new UFileService();

      //prepare data for uFileProperties0
      UFileProperties uFileProperties0 = mock(UFileProperties.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("1").when(uFileProperties0).getBucketName();
      doReturn("5bs`Ab;FvOUsN)/1").when(uFileProperties0).getPrivateKey();
      doReturn("5bs`Ab;FvOUsN)/1").when(uFileProperties0).getPublicKey();
      doReturn("private").when(uFileProperties0).getUploadDomain();

      //invoke method for uFileService0
      PrivateAccess.setVariable((Class<?>) UFileService.class, uFileService0, "uFileProperties", (Object) uFileProperties0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      UFileResult uFileResult0 = uFileService0.upload((InputStream) pipedInputStream0, "5#')3 U ", "Maps.asConverter(");
      assertNull(uFileResult0);
  }
  @Test(timeout = 4000)
  public void test_exchangeFileUrl_10()  throws Throwable  {
      UFileService uFileService0 = new UFileService();

      //prepare data for uFileProperties0
      UFileProperties uFileProperties0 = mock(UFileProperties.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("ucloud.ufile.downloadDomain is missing, eg. bucketname.cn-bj.ufileos.com.").when(uFileProperties0).getBucketName();
      doReturn("1.0").when(uFileProperties0).getPrivateKey();
      doReturn("C@*XkJSdhl@{~").when(uFileProperties0).getPublicKey();
      doReturn("12288").when(uFileProperties0).getUploadDomain();

      //invoke method for uFileService0
      PrivateAccess.setVariable((Class<?>) UFileService.class, uFileService0, "uFileProperties", (Object) uFileProperties0);
      UFileResult uFileResult0 = uFileService0.exchangeFileUrl("new file exception");
      assertNull(uFileResult0);
  }
  @Test(timeout = 4000)
  public void test_exchangeFileUrl_11()  throws Throwable  {
      UFileService uFileService0 = new UFileService();

      //prepare data for uFileProperties0
      UFileProperties uFileProperties0 = mock(UFileProperties.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("ucloud.ufile.bucketName is missing.").when(uFileProperties0).getBucketName();
      doReturn("vw;@zx9';%").when(uFileProperties0).getDownloadDomain();
      doReturn("r{lw#X").when(uFileProperties0).getPrivateKey();
      doReturn("").when(uFileProperties0).getPublicKey();
      doReturn("ucloud.ufile.downloadDomain is missing, eg. bucketname.cn-bj.ufileos.com.").when(uFileProperties0).getUploadDomain();

      //invoke method for uFileService0
      PrivateAccess.setVariable((Class<?>) UFileService.class, uFileService0, "uFileProperties", (Object) uFileProperties0);
      UFileResult uFileResult0 = uFileService0.exchangeFileUrl("ucloud.ufile.expiresDuration is missing, eg. 1000.");
      assertNotNull(uFileResult0);
      assertEquals("ucloud.ufile.expiresDuration is missing, eg. 1000.", uFileResult0.getFileName());
  }
  @Test(timeout = 4000)
  public void test_exchangeFileUrl_12()  throws Throwable  {
      UFileService uFileService0 = new UFileService();

      //prepare data for uFileProperties0
      Integer integer0 = new Integer(1);
      UFileProperties uFileProperties0 = mock(UFileProperties.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("new file exception").when(uFileProperties0).getBucketName();
      doReturn("private", "private").when(uFileProperties0).getBucketType();
      doReturn("new file exception").when(uFileProperties0).getDownloadDomain();
      doReturn(integer0).when(uFileProperties0).getExpiresDuration();
      doReturn("new file exception", "1.0").when(uFileProperties0).getPrivateKey();
      doReturn("new file exception", "1.0").when(uFileProperties0).getPublicKey();
      doReturn("new file exception").when(uFileProperties0).getUploadDomain();

      //invoke method for uFileService0
      PrivateAccess.setVariable((Class<?>) UFileService.class, uFileService0, "uFileProperties", (Object) uFileProperties0);
      UFileResult uFileResult0 = uFileService0.exchangeFileUrl("new file exception");
      assertNotNull(uFileResult0);
      assertEquals("http://new file exception/new file exception?UCloudPublicKey=1.0&Signature=VIfHCXJoYtAimYm2B4Ppz3oRcKE%3D&Expires=1392409282", uFileResult0.getFileUrl());
  }
  @Test(timeout = 4000)
  public void test_exchangeFileUrl_13()  throws Throwable  {
      UFileService uFileService0 = new UFileService();

      //prepare data for uFileProperties0
      UFileProperties uFileProperties0 = mock(UFileProperties.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("", "*AMo:u<QT$~>27LlW").when(uFileProperties0).getBucketName();
      doReturn("ucloud.ufile.privateKey is missing.").when(uFileProperties0).getBucketType();
      doReturn("", "1").when(uFileProperties0).getDownloadDomain();
      doReturn("", "ucloud.ufile.publicKey is missing.").when(uFileProperties0).getPrivateKey();
      doReturn("", "1").when(uFileProperties0).getPublicKey();
      doReturn("").when(uFileProperties0).getUploadDomain();

      //invoke method for uFileService0
      PrivateAccess.setVariable((Class<?>) UFileService.class, uFileService0, "uFileProperties", (Object) uFileProperties0);
      UFileResult uFileResult0 = uFileService0.exchangeFileUrl("");
      assertNull(uFileResult0);
  }
  @Test(timeout = 4000)
  public void test_exchangeFileUrl_14()  throws Throwable  {
      UFileService uFileService0 = new UFileService();

      //prepare data for uFileProperties0
      Integer integer0 = new Integer(0);
      UFileProperties uFileProperties0 = mock(UFileProperties.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("http://%s").when(uFileProperties0).getBucketName();
      doReturn("The filter must not be null", "private").when(uFileProperties0).getBucketType();
      doReturn("CharMatcher.whitespace()").when(uFileProperties0).getDownloadDomain();
      doReturn(integer0).when(uFileProperties0).getExpiresDuration();
      doReturn("", "").when(uFileProperties0).getPrivateKey();
      doReturn("upload error,{}", "http://%s").when(uFileProperties0).getPublicKey();
      doReturn("0").when(uFileProperties0).getUploadDomain();

      //invoke method for uFileService0
      PrivateAccess.setVariable((Class<?>) UFileService.class, uFileService0, "uFileProperties", (Object) uFileProperties0);
      UFileResult uFileResult0 = uFileService0.exchangeFileUrl("0");
      assertNull(uFileResult0);
  }
  @Test(timeout = 4000)
  public void test_upload_15()  throws Throwable  {
      UFileService uFileService0 = new UFileService();

      //prepare data for uFileProperties0
      UFileProperties uFileProperties0 = mock(UFileProperties.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("upload error,{}").when(uFileProperties0).getBucketName();
      doReturn("1.0").when(uFileProperties0).getDownloadDomain();
      doReturn("5bs`Ab;FvOUsN)/1").when(uFileProperties0).getPrivateKey();
      doReturn("5bs`Ab;FvOUsN)/1").when(uFileProperties0).getPublicKey();
      doReturn("private").when(uFileProperties0).getUploadDomain();

      //invoke method for uFileService0
      PrivateAccess.setVariable((Class<?>) UFileService.class, uFileService0, "uFileProperties", (Object) uFileProperties0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      UFileResult uFileResult0 = uFileService0.upload((InputStream) pipedInputStream0, "5#')3 U ", "Maps.asConverter(");
      assertNull(uFileResult0);
  }}

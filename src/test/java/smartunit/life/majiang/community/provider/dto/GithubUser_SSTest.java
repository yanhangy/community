/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.life.majiang.community.provider.dto;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import life.majiang.community.provider.dto.GithubUser;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class GithubUser_SSTest extends GithubUser_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_setBio_00()  throws Throwable  {
      GithubUser githubUser0 = new GithubUser();

      //invoke method for githubUser0
      githubUser0.setBio(")");

      //invoke method for githubUser0
      assertNull(githubUser0.getName());
  }
  @Test(timeout = 4000)
  public void test_setAvatarUrl_01()  throws Throwable  {
      GithubUser githubUser0 = new GithubUser();

      //invoke method for githubUser0
      githubUser0.setAvatarUrl("0");

      //invoke method for githubUser0
      assertEquals("0", githubUser0.getAvatarUrl());
  }
  @Test(timeout = 4000)
  public void test_setId_02()  throws Throwable  {
      GithubUser githubUser0 = new GithubUser();
      Long long0 = new Long(0L);

      //invoke method for githubUser0
      githubUser0.setId(long0);

      //invoke method for githubUser0
      assertEquals(0L, (long)githubUser0.getId());
  }
  @Test(timeout = 4000)
  public void test_equals_03()  throws Throwable  {
      GithubUser githubUser0 = new GithubUser();

      //invoke method for githubUser0
      githubUser0.getId();
      boolean boolean0 = githubUser0.equals(githubUser0);
      assertTrue(boolean0);
  }
  @Test(timeout = 4000)
  public void test_equals_04()  throws Throwable  {
      GithubUser githubUser0 = new GithubUser();

      //invoke method for githubUser0
      githubUser0.getId();
      boolean boolean0 = githubUser0.equals(", avatarUrl=");
      assertFalse(boolean0);
  }
  @Test(timeout = 4000)
  public void test_setName_05()  throws Throwable  {
      GithubUser githubUser0 = new GithubUser();

      //invoke method for githubUser0
      githubUser0.getId();

      //invoke method for githubUser0
      githubUser0.setName("~^:[Oaa4J)L$&nGY");

      //invoke method for githubUser0
      assertEquals("~^:[Oaa4J)L$&nGY", githubUser0.getName());
  }
  @Test(timeout = 4000)
  public void test_equals_06()  throws Throwable  {
      GithubUser githubUser0 = new GithubUser();

      //invoke method for githubUser0
      githubUser0.getId();
      GithubUser githubUser1 = new GithubUser();
      boolean boolean0 = githubUser0.equals(githubUser1);
      assertTrue(boolean0);
  }
  @Test(timeout = 4000)
  public void test_equals_07()  throws Throwable  {
      GithubUser githubUser0 = new GithubUser();

      //invoke method for githubUser0
      githubUser0.getId();
      GithubUser githubUser1 = new GithubUser();
      boolean boolean0 = githubUser1.equals(githubUser0);
      assertTrue(boolean0);
  }
  @Test(timeout = 4000)
  public void test_getBio_08()  throws Throwable  {
      GithubUser githubUser0 = new GithubUser();

      //invoke method for githubUser0
      githubUser0.getId();
      String string0 = githubUser0.toString();
      assertEquals("GithubUser(name=null, id=null, bio=null, avatarUrl=null)", string0);
  }
  @Test(timeout = 4000)
  public void test_hashCode_09()  throws Throwable  {
      GithubUser githubUser0 = new GithubUser();

      //invoke method for githubUser0
      githubUser0.hashCode();
  }
  @Test(timeout = 4000)
  public void test_hashCode_10()  throws Throwable  {
      GithubUser githubUser0 = new GithubUser();

      //invoke method for githubUser0
      githubUser0.getId();

      //invoke method for githubUser0
      githubUser0.hashCode();
  }}

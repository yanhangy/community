/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.life.majiang.community.listener;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import life.majiang.community.listener.QuestionRateLimiterListener;
import life.majiang.community.listener.event.QuestionRateLimiterEvent;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class QuestionRateLimiterListener_SSTest extends QuestionRateLimiterListener_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_onApplicationEvent_0()  throws Throwable  {
      QuestionRateLimiterListener questionRateLimiterListener0 = new QuestionRateLimiterListener();

      //prepare data for questionRateLimiterEvent0
      Long long0 = new Long(861L);
      QuestionRateLimiterEvent questionRateLimiterEvent0 = mock(QuestionRateLimiterEvent.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(questionRateLimiterEvent0).getUserId();

      //invoke method for questionRateLimiterListener0
      questionRateLimiterListener0.onApplicationEvent(questionRateLimiterEvent0);
  }}

/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.life.majiang.community.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import java.io.File;
import life.majiang.community.utils.FileUtils;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class FileUtils_SSTest extends FileUtils_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_deleteFile_0()  throws Throwable  {
      File file0 = mock(File.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true).when(file0).delete();
      FileUtils.deleteFile(file0);
  }
  @Test(timeout = 4000)
  public void test_newUUIDFileName_1()  throws Throwable  {
      String string0 = FileUtils.newLocalFileName("", "");
      assertEquals("", string0);
  }
  @Test(timeout = 4000)
  public void test_deleteFile_2()  throws Throwable  {
      FileUtils.deleteFile((File) null);
  }
  @Test(timeout = 4000)
  public void test_newLocalFileName_3()  throws Throwable  {
    try {
      String string0 = FileUtils.newLocalFileName("1", "FILE_UTILS_NEW_INFO, url : {}, localFile : {}");
      //  // Unstable assertion: assertEquals("1e505d45d60744e7bac0e7fb293a8e322.png", string0);
    } catch (java.lang.Exception checkException) {
            // Need to catch junit check exceptions
    }
  }
  @Test(timeout = 4000)
  public void test_main_4()  throws Throwable  {
      FileUtils fileUtils0 = new FileUtils();
      String[] stringArray0 = new String[0];
      FileUtils.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }
  @Test(timeout = 4000)
  public void test_newFile_5()  throws Throwable  {
      File file0 = FileUtils.newFile(".jpeg");
      assertNull(file0);
  }}

/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.life.majiang.community.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import life.majiang.community.controller.NotificationController;
import life.majiang.community.dto.NotificationDTO;
import life.majiang.community.model.User;
import life.majiang.community.service.NotificationService;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class NotificationController_SSTest extends NotificationController_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_profile_0()  throws Throwable  {
      NotificationController notificationController0 = new NotificationController();

      //prepare data for httpServletRequest0
      HttpSession httpSession0 = mock(HttpSession.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(httpSession0).when(httpServletRequest0).getSession();
      String string0 = notificationController0.profile(httpServletRequest0, (Long) null);
      assertEquals("redirect:/", string0);
  }
  @Test(timeout = 4000)
  public void test_profile_1()  throws Throwable  {
      NotificationController notificationController0 = new NotificationController();

      //prepare data for notificationService0
      Integer integer0 = new Integer(2);
      Long long0 = Long.getLong("117");
      NotificationDTO notificationDTO0 = mock(NotificationDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn((Long) null).when(notificationDTO0).getOuterid();
      doReturn(integer0).when(notificationDTO0).getType();
      NotificationService notificationService0 = mock(NotificationService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(notificationDTO0).when(notificationService0).read(nullable(java.lang.Long.class) , nullable(life.majiang.community.model.User.class));

      //invoke method for notificationController0
      PrivateAccess.setVariable((Class<?>) NotificationController.class, notificationController0, "notificationService", (Object) notificationService0);

      //prepare data for httpServletRequest0
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      HttpSession httpSession0 = mock(HttpSession.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(user0).when(httpSession0).getAttribute(nullable(java.lang.String.class));
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(httpSession0).when(httpServletRequest0).getSession();
      String string0 = notificationController0.profile(httpServletRequest0, long0);
      assertEquals("redirect:/question/null", string0);
  }
  @Test(timeout = 4000)
  public void test_profile_2()  throws Throwable  {
      NotificationController notificationController0 = new NotificationController();

      //prepare data for notificationService0
      Integer integer0 = new Integer(1);
      Long long0 = new Long(772L);
      NotificationDTO notificationDTO0 = mock(NotificationDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(notificationDTO0).getOuterid();
      doReturn(integer0, integer0).when(notificationDTO0).getType();
      NotificationService notificationService0 = mock(NotificationService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(notificationDTO0).when(notificationService0).read(nullable(java.lang.Long.class) , nullable(life.majiang.community.model.User.class));

      //invoke method for notificationController0
      PrivateAccess.setVariable((Class<?>) NotificationController.class, notificationController0, "notificationService", (Object) notificationService0);

      //prepare data for httpServletRequest0
      User user0 = new User();
      HttpSession httpSession0 = mock(HttpSession.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(user0).when(httpSession0).getAttribute(nullable(java.lang.String.class));
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(httpSession0).when(httpServletRequest0).getSession();
      String string0 = notificationController0.profile(httpServletRequest0, long0);
      assertEquals("redirect:/question/772", string0);
  }
  @Test(timeout = 4000)
  public void test_profile_3()  throws Throwable  {
      NotificationController notificationController0 = new NotificationController();

      //prepare data for notificationService0
      Integer integer0 = new Integer(0);
      NotificationDTO notificationDTO0 = mock(NotificationDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0, integer0).when(notificationDTO0).getType();
      NotificationService notificationService0 = mock(NotificationService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(notificationDTO0).when(notificationService0).read(nullable(java.lang.Long.class) , nullable(life.majiang.community.model.User.class));

      //invoke method for notificationController0
      PrivateAccess.setVariable((Class<?>) NotificationController.class, notificationController0, "notificationService", (Object) notificationService0);

      //prepare data for httpServletRequest0
      User user0 = new User();
      HttpSession httpSession0 = mock(HttpSession.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(user0).when(httpSession0).getAttribute(nullable(java.lang.String.class));
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(httpSession0).when(httpServletRequest0).getSession();
      Long long0 = new Long(0);
      String string0 = notificationController0.profile(httpServletRequest0, long0);
      assertEquals("redirect:/", string0);
  }}

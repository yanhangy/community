/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.life.majiang.community.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import life.majiang.community.cache.QuestionRateLimiter;
import life.majiang.community.controller.PublishController;
import life.majiang.community.dto.QuestionDTO;
import life.majiang.community.model.User;
import life.majiang.community.service.QuestionService;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.ui.ConcurrentModel;
import org.springframework.ui.ExtendedModelMap;
import org.springframework.ui.Model;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PublishController_SSTest extends PublishController_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_publish_0()  throws Throwable  {
      PublishController publishController0 = new PublishController();
      ConcurrentModel concurrentModel0 = new ConcurrentModel();
      String string0 = publishController0.publish(concurrentModel0);
      assertEquals("publish", string0);
  }
  @Test(timeout = 4000)
  public void test_doPublish_1()  throws Throwable  {
      PublishController publishController0 = new PublishController();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      ExtendedModelMap extendedModelMap0 = new ExtendedModelMap();
      String string0 = publishController0.doPublish("", "", "", (Long) null, httpServletRequest0, extendedModelMap0);
      assertEquals("publish", string0);
  }
  @Test(timeout = 4000)
  public void test_edit_2()  throws Throwable  {
      PublishController publishController0 = new PublishController();

      //prepare data for questionService0
      QuestionDTO questionDTO0 = mock(QuestionDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      QuestionService questionService0 = mock(QuestionService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(questionDTO0).when(questionService0).getById(nullable(java.lang.Long.class));

      //invoke method for publishController0
      PrivateAccess.setVariable((Class<?>) PublishController.class, publishController0, "questionService", (Object) questionService0);
      Long long0 = new Long(1425L);
      Model model0 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      String string0 = publishController0.edit(long0, model0);
      assertEquals("publish", string0);
  }
  @Test(timeout = 4000)
  public void test_doPublish_3()  throws Throwable  {
      PublishController publishController0 = new PublishController();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      ExtendedModelMap extendedModelMap0 = new ExtendedModelMap();
      String string0 = publishController0.doPublish("life.majiang.community.controller.PublishController", "life.majiang.community.controller.PublishController", "life.majiang.community.controller.PublishController", (Long) null, httpServletRequest0, extendedModelMap0);
      assertEquals("publish", string0);
  }
  @Test(timeout = 4000)
  public void test_doPublish_4()  throws Throwable  {
      PublishController publishController0 = new PublishController();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      ExtendedModelMap extendedModelMap0 = new ExtendedModelMap();
      String string0 = publishController0.doPublish("3", "", "", (Long) null, httpServletRequest0, extendedModelMap0);
      assertEquals("publish", string0);
  }
  @Test(timeout = 4000)
  public void test_doPublish_5()  throws Throwable  {
      PublishController publishController0 = new PublishController();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      ExtendedModelMap extendedModelMap0 = new ExtendedModelMap();
      String string0 = publishController0.doPublish("Could not initialize intrinsics", "] from ClassLoader [", "", (Long) null, httpServletRequest0, extendedModelMap0);
      assertEquals("publish", string0);
  }
  @Test(timeout = 4000)
  public void test_doPublish_6()  throws Throwable  {
      PublishController publishController0 = new PublishController();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      ExtendedModelMap extendedModelMap0 = new ExtendedModelMap();
      String string0 = publishController0.doPublish("com.google.common.Kae.Suppliers$Su?plierOfIntance", "com.google.common.Kae.Suppliers$Su?plierOfIntance", "com.google.common.Kae.Suppliers$Su?plierOfIntance", (Long) null, httpServletRequest0, extendedModelMap0);
      assertEquals("publish", string0);
  }
  @Test(timeout = 4000)
  public void test_doPublish_7()  throws Throwable  {
      PublishController publishController0 = new PublishController();

      //prepare data for httpServletRequest0
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      HttpSession httpSession0 = mock(HttpSession.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(user0).when(httpSession0).getAttribute(nullable(java.lang.String.class));
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(httpSession0).when(httpServletRequest0).getSession();
      ExtendedModelMap extendedModelMap0 = new ExtendedModelMap();
      // Undeclared exception!
      try { 

        //invoke method for publishController0
        publishController0.doPublish("docker", "docker", "docker", (Long) null, httpServletRequest0, extendedModelMap0);
      
      } catch(Throwable e) {
         //
         // Exception Name: NullPointerException
         // no message in exception (getMessage() returned null)
         //
      }
  }
  @Test(timeout = 4000)
  public void test_doPublish_8()  throws Throwable  {
      PublishController publishController0 = new PublishController();

      //prepare data for httpServletRequest0
      HttpSession httpSession0 = mock(HttpSession.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(httpSession0).when(httpServletRequest0).getSession();
      ExtendedModelMap extendedModelMap0 = new ExtendedModelMap();
      String string0 = publishController0.doPublish("docker", "docker", "docker", (Long) null, httpServletRequest0, extendedModelMap0);
      assertEquals("publish", string0);
  }
  @Test(timeout = 4000)
  public void test_doPublish_9()  throws Throwable  {
      PublishController publishController0 = new PublishController();
      QuestionRateLimiter questionRateLimiter0 = new QuestionRateLimiter();
      QuestionService questionService0 = mock(QuestionService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //invoke method for publishController0
      PrivateAccess.setVariable((Class<?>) PublishController.class, publishController0, "questionService", (Object) questionService0);

      //invoke method for publishController0
      PrivateAccess.setVariable((Class<?>) PublishController.class, publishController0, "questionRateLimiter", (Object) questionRateLimiter0);

      //prepare data for httpServletRequest0
      Long long0 = new Long((-1L));
      Integer integer0 = new Integer((-1));
      Long long1 = new Long(0L);
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0, integer0).when(user0).getDisable();
      doReturn(long0, long1).when(user0).getId();
      HttpSession httpSession0 = mock(HttpSession.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(user0).when(httpSession0).getAttribute(nullable(java.lang.String.class));
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(httpSession0).when(httpServletRequest0).getSession();
      ExtendedModelMap extendedModelMap0 = new ExtendedModelMap();
      Object object0 = new Object();
      extendedModelMap0.put("tag", object0);
      // Undeclared exception!
      try { 

        //invoke method for publishController0
        publishController0.doPublish("^[a-zA-Z0-9][a-zA-Z0-9-]*$", "com.google.common.collect.Maps$BiMapConverter", "koa", long0, httpServletRequest0, extendedModelMap0);
      
      } catch(Throwable e) {
         //
         // Exception Name: NullPointerException
         // no message in exception (getMessage() returned null)
         //
      }
  }}

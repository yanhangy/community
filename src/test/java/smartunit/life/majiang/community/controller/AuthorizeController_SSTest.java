/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.life.majiang.community.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import life.majiang.community.controller.AuthorizeController;
import life.majiang.community.service.UserService;
import life.majiang.community.strategy.LoginUserInfo;
import life.majiang.community.strategy.UserStrategy;
import life.majiang.community.strategy.UserStrategyFactory;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AuthorizeController_SSTest extends AuthorizeController_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_newCallback_0()  throws Throwable  {
      AuthorizeController authorizeController0 = new AuthorizeController();

      //prepare data for userStrategyFactory0
      LoginUserInfo loginUserInfo0 = mock(LoginUserInfo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      UserStrategy userStrategy0 = mock(UserStrategy.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(loginUserInfo0).when(userStrategy0).getUser(nullable(java.lang.String.class) , nullable(java.lang.String.class));
      UserStrategyFactory userStrategyFactory0 = mock(UserStrategyFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(userStrategy0).when(userStrategyFactory0).getStrategy(nullable(java.lang.String.class));

      //invoke method for authorizeController0
      PrivateAccess.setVariable((Class<?>) AuthorizeController.class, authorizeController0, "userStrategyFactory", (Object) userStrategyFactory0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      String string0 = authorizeController0.newCallback("com.google.common.base.CharMatcher$SingleWidth", "redirect:/", "life.majiang.community.controller.AuthorizeController", httpServletRequest0, httpServletResponse0);
      assertEquals("redirect:/", string0);
  }
  @Test(timeout = 4000)
  public void test_newCallback_1()  throws Throwable  {
      AuthorizeController authorizeController0 = new AuthorizeController();

      //prepare data for userStrategyFactory0
      UserStrategy userStrategy0 = mock(UserStrategy.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      UserStrategyFactory userStrategyFactory0 = mock(UserStrategyFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(userStrategy0).when(userStrategyFactory0).getStrategy(nullable(java.lang.String.class));

      //invoke method for authorizeController0
      PrivateAccess.setVariable((Class<?>) AuthorizeController.class, authorizeController0, "userStrategyFactory", (Object) userStrategyFactory0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      String string0 = authorizeController0.newCallback("UE=|K\"tOGxI)[q", "callback get github error,{}", "com.google.common.base.Suppliers$MemoizingSupplier", httpServletRequest0, httpServletResponse0);
      assertEquals("redirect:/", string0);
  }
  @Test(timeout = 4000)
  public void test_logout_2()  throws Throwable  {
      AuthorizeController authorizeController0 = new AuthorizeController();

      //prepare data for httpServletRequest0
      HttpSession httpSession0 = mock(HttpSession.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(httpSession0).when(httpServletRequest0).getSession();
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      String string0 = authorizeController0.logout(httpServletRequest0, httpServletResponse0);
      assertEquals("redirect:/", string0);
  }
  @Test(timeout = 4000)
  public void test_newCallback_3()  throws Throwable  {
      AuthorizeController authorizeController0 = new AuthorizeController();
      UserService userService0 = mock(UserService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //prepare data for userStrategyFactory0
      Long long0 = new Long(483L);
      LoginUserInfo loginUserInfo0 = mock(LoginUserInfo.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(loginUserInfo0).getId();
      UserStrategy userStrategy0 = mock(UserStrategy.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(loginUserInfo0).when(userStrategy0).getUser(nullable(java.lang.String.class) , nullable(java.lang.String.class));
      UserStrategyFactory userStrategyFactory0 = mock(UserStrategyFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(userStrategy0).when(userStrategyFactory0).getStrategy(nullable(java.lang.String.class));

      //invoke method for authorizeController0
      PrivateAccess.setVariable((Class<?>) AuthorizeController.class, authorizeController0, "userStrategyFactory", (Object) userStrategyFactory0);

      //invoke method for authorizeController0
      PrivateAccess.setVariable((Class<?>) AuthorizeController.class, authorizeController0, "userService", (Object) userService0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      String string0 = authorizeController0.newCallback("com.google.common.base.CharMatcher$SingleWidth", "redirect:/", "life.majiang.community.controller.AuthorizeController", httpServletRequest0, httpServletResponse0);
      assertEquals("redirect:/", string0);
  }}

/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.life.majiang.community.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import java.util.ArrayList;
import java.util.Vector;
import life.majiang.community.controller.QuestionController;
import life.majiang.community.dto.CommentDTO;
import life.majiang.community.dto.QuestionDTO;
import life.majiang.community.service.CommentService;
import life.majiang.community.service.QuestionService;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.ui.Model;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class QuestionController_SSTest extends QuestionController_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_question_0()  throws Throwable  {
      QuestionController questionController0 = new QuestionController();
      Model model0 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      // Undeclared exception!
      try { 

        //invoke method for questionController0
        questionController0.question("relatedQuestions", model0);
      
      } catch(Throwable e) {
         //
         // Exception Name: RuntimeException
         // \u975E\u6CD5\u8F93\u5165
         //
      }
  }
  @Test(timeout = 4000)
  public void test_question_1()  throws Throwable  {
      QuestionController questionController0 = new QuestionController();

      //prepare data for commentService0
      Vector<CommentDTO> vector0 = new Vector<CommentDTO>();
      CommentService commentService0 = mock(CommentService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(vector0).when(commentService0).listByTargetId(nullable(java.lang.Long.class) , nullable(life.majiang.community.enums.CommentTypeEnum.class));

      //prepare data for questionService0
      ArrayList<QuestionDTO> arrayList0 = new ArrayList<QuestionDTO>();
      QuestionDTO questionDTO0 = mock(QuestionDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      QuestionService questionService0 = mock(QuestionService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(questionDTO0).when(questionService0).getById(nullable(java.lang.Long.class));
      doReturn(arrayList0).when(questionService0).selectRelated(nullable(life.majiang.community.dto.QuestionDTO.class));

      //invoke method for questionController0
      PrivateAccess.setVariable((Class<?>) QuestionController.class, questionController0, "questionService", (Object) questionService0);

      //invoke method for questionController0
      PrivateAccess.setVariable((Class<?>) QuestionController.class, questionController0, "commentService", (Object) commentService0);

      //prepare data for model3
      Model model0 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Model model1 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Model model2 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Model model3 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(model2, model1, model0).when(model3).addAttribute(nullable(java.lang.String.class) , any());
      String string0 = questionController0.question("1", model3);
      assertEquals("question", string0);
  }}

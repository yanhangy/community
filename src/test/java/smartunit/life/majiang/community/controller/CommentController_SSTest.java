/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.life.majiang.community.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import java.util.LinkedList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import life.majiang.community.cache.QuestionRateLimiter;
import life.majiang.community.controller.CommentController;
import life.majiang.community.dto.CommentCreateDTO;
import life.majiang.community.dto.CommentDTO;
import life.majiang.community.dto.ResultDTO;
import life.majiang.community.model.User;
import life.majiang.community.service.CommentService;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CommentController_SSTest extends CommentController_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_comments_0()  throws Throwable  {
      CommentController commentController0 = new CommentController();

      //prepare data for commentService0
      LinkedList<CommentDTO> linkedList0 = new LinkedList<CommentDTO>();
      CommentService commentService0 = mock(CommentService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(linkedList0).when(commentService0).listByTargetId(nullable(java.lang.Long.class) , nullable(life.majiang.community.enums.CommentTypeEnum.class));

      //invoke method for commentController0
      PrivateAccess.setVariable((Class<?>) CommentController.class, commentController0, "commentService", (Object) commentService0);
      Long long0 = new Long(1L);
      ResultDTO<List<CommentDTO>> resultDTO0 = commentController0.comments(long0);
      assertEquals("\u8BF7\u6C42\u6210\u529F", resultDTO0.getMessage());
  }
  @Test(timeout = 4000)
  public void test_post_1()  throws Throwable  {
      CommentController commentController0 = new CommentController();
      CommentCreateDTO commentCreateDTO0 = mock(CommentCreateDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //prepare data for httpServletRequest0
      HttpSession httpSession0 = mock(HttpSession.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(httpSession0).when(httpServletRequest0).getSession();
      ResultDTO resultDTO0 = (ResultDTO)commentController0.post(commentCreateDTO0, httpServletRequest0);
      assertEquals(2003, (int)resultDTO0.getCode());
  }
  @Test(timeout = 4000)
  public void test_post_2()  throws Throwable  {
      CommentController commentController0 = new CommentController();

      //prepare data for commentCreateDTO0
      CommentCreateDTO commentCreateDTO0 = mock(CommentCreateDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("disable between").when(commentCreateDTO0).getContent();

      //prepare data for httpServletRequest0
      Integer integer0 = new Integer(1);
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0).when(user0).getDisable();
      HttpSession httpSession0 = mock(HttpSession.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(user0).when(httpSession0).getAttribute(nullable(java.lang.String.class));
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(httpSession0).when(httpServletRequest0).getSession();
      ResultDTO resultDTO0 = (ResultDTO)commentController0.post(commentCreateDTO0, httpServletRequest0);
      assertEquals(2013, (int)resultDTO0.getCode());
  }
  @Test(timeout = 4000)
  public void test_post_3()  throws Throwable  {
      CommentController commentController0 = new CommentController();
      CommentCreateDTO commentCreateDTO0 = new CommentCreateDTO();

      //prepare data for httpServletRequest0
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      HttpSession httpSession0 = mock(HttpSession.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(user0).when(httpSession0).getAttribute(nullable(java.lang.String.class));
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(httpSession0).when(httpServletRequest0).getSession();
      ResultDTO resultDTO0 = (ResultDTO)commentController0.post(commentCreateDTO0, httpServletRequest0);
      assertEquals("\u8F93\u5165\u5185\u5BB9\u4E0D\u80FD\u4E3A\u7A7A", resultDTO0.getMessage());
  }
  @Test(timeout = 4000)
  public void test_post_4()  throws Throwable  {
      CommentController commentController0 = new CommentController();

      //prepare data for questionRateLimiter0
      QuestionRateLimiter questionRateLimiter0 = mock(QuestionRateLimiter.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true).when(questionRateLimiter0).reachLimit(nullable(java.lang.Long.class));

      //invoke method for commentController0
      PrivateAccess.setVariable((Class<?>) CommentController.class, commentController0, "questionRateLimiter", (Object) questionRateLimiter0);

      //prepare data for commentCreateDTO0
      CommentCreateDTO commentCreateDTO0 = mock(CommentCreateDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("CONTENT_IS_EMPTY").when(commentCreateDTO0).getContent();

      //prepare data for httpServletRequest0
      Integer integer0 = new Integer(125);
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(integer0, integer0).when(user0).getDisable();
      doReturn((Long) null).when(user0).getId();
      HttpSession httpSession0 = mock(HttpSession.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(user0).when(httpSession0).getAttribute(nullable(java.lang.String.class));
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(httpSession0).when(httpServletRequest0).getSession();
      ResultDTO resultDTO0 = (ResultDTO)commentController0.post(commentCreateDTO0, httpServletRequest0);
      assertEquals(2014, (int)resultDTO0.getCode());
  }
  @Test(timeout = 4000)
  public void test_post_5()  throws Throwable  {
      CommentController commentController0 = new CommentController();

      //prepare data for questionRateLimiter0
      QuestionRateLimiter questionRateLimiter0 = mock(QuestionRateLimiter.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(true).when(questionRateLimiter0).reachLimit(nullable(java.lang.Long.class));

      //invoke method for commentController0
      PrivateAccess.setVariable((Class<?>) CommentController.class, commentController0, "questionRateLimiter", (Object) questionRateLimiter0);
      CommentCreateDTO commentCreateDTO0 = new CommentCreateDTO();
      commentCreateDTO0.setContent("USER_DISABLE");

      //prepare data for httpServletRequest0
      User user0 = new User();
      HttpSession httpSession0 = mock(HttpSession.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(user0).when(httpSession0).getAttribute(nullable(java.lang.String.class));
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(httpSession0).when(httpServletRequest0).getSession();
      ResultDTO resultDTO0 = (ResultDTO)commentController0.post(commentCreateDTO0, httpServletRequest0);
      assertEquals(2014, (int)resultDTO0.getCode());
  }
  @Test(timeout = 4000)
  public void test_post_6()  throws Throwable  {
      CommentController commentController0 = new CommentController();

      //prepare data for questionRateLimiter0
      QuestionRateLimiter questionRateLimiter0 = mock(QuestionRateLimiter.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(false).when(questionRateLimiter0).reachLimit(nullable(java.lang.Long.class));
      CommentService commentService0 = mock(CommentService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

      //invoke method for commentController0
      PrivateAccess.setVariable((Class<?>) CommentController.class, commentController0, "commentService", (Object) commentService0);

      //invoke method for commentController0
      PrivateAccess.setVariable((Class<?>) CommentController.class, commentController0, "questionRateLimiter", (Object) questionRateLimiter0);

      //prepare data for commentCreateDTO0
      Integer integer0 = new Integer(1);
      Long long0 = new Long(3024L);
      CommentCreateDTO commentCreateDTO0 = mock(CommentCreateDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn("FN*fpS,V<4]Gkzw|6Y", "CONTENT_IS_EMPTY").when(commentCreateDTO0).getContent();
      doReturn(long0).when(commentCreateDTO0).getParentId();
      doReturn(integer0).when(commentCreateDTO0).getType();

      //prepare data for httpServletRequest0
      User user0 = new User();
      HttpSession httpSession0 = mock(HttpSession.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(user0).when(httpSession0).getAttribute(nullable(java.lang.String.class));
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(httpSession0).when(httpServletRequest0).getSession();
      ResultDTO resultDTO0 = (ResultDTO)commentController0.post(commentCreateDTO0, httpServletRequest0);
      assertEquals(200, (int)resultDTO0.getCode());
  }}

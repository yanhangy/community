/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.life.majiang.community.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import java.time.DayOfWeek;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import life.majiang.community.controller.ProfileController;
import life.majiang.community.dto.PaginationDTO;
import life.majiang.community.model.User;
import life.majiang.community.service.NotificationService;
import life.majiang.community.service.QuestionService;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.ui.Model;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ProfileController_SSTest extends ProfileController_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_profile_0()  throws Throwable  {
      ProfileController profileController0 = new ProfileController();

      //prepare data for httpServletRequest0
      HttpSession httpSession0 = mock(HttpSession.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(httpSession0).when(httpServletRequest0).getSession();
      Model model0 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Integer integer0 = new Integer(0);
      String string0 = profileController0.profile(httpServletRequest0, "sectionName", model0, integer0, integer0);
      assertEquals("redirect:/", string0);
  }
  @Test(timeout = 4000)
  public void test_profile_1()  throws Throwable  {
      ProfileController profileController0 = new ProfileController();

      //prepare data for httpServletRequest0
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      HttpSession httpSession0 = mock(HttpSession.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(user0).when(httpSession0).getAttribute(nullable(java.lang.String.class));
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(httpSession0).when(httpServletRequest0).getSession();
      Model model0 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Integer integer0 = new Integer(0);
      String string0 = profileController0.profile(httpServletRequest0, "com.google.common.base.Suppliers$SupplierOfInstance", model0, integer0, integer0);
      assertEquals("profile", string0);
  }
  @Test(timeout = 4000)
  public void test_profile_2()  throws Throwable  {
      ProfileController profileController0 = new ProfileController();

      //prepare data for notificationService0
      PaginationDTO<DayOfWeek> paginationDTO0 = (PaginationDTO<DayOfWeek>) mock(PaginationDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      NotificationService notificationService0 = mock(NotificationService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(paginationDTO0).when(notificationService0).list(nullable(java.lang.Long.class) , nullable(java.lang.Integer.class) , nullable(java.lang.Integer.class));

      //invoke method for profileController0
      PrivateAccess.setVariable((Class<?>) ProfileController.class, profileController0, "notificationService", (Object) notificationService0);

      //prepare data for httpServletRequest0
      Long long0 = new Long(4776L);
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(user0).getId();
      HttpSession httpSession0 = mock(HttpSession.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(user0).when(httpSession0).getAttribute(nullable(java.lang.String.class));
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(httpSession0).when(httpServletRequest0).getSession();

      //prepare data for model3
      Model model0 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Model model1 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Model model2 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Model model3 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(model2, model1, model0).when(model3).addAttribute(nullable(java.lang.String.class) , any());
      Integer integer0 = new Integer(0);
      String string0 = profileController0.profile(httpServletRequest0, "replies", model3, integer0, integer0);
      assertEquals("profile", string0);
  }
  @Test(timeout = 4000)
  public void test_profile_3()  throws Throwable  {
      ProfileController profileController0 = new ProfileController();

      //prepare data for questionService0
      PaginationDTO<Integer> paginationDTO0 = (PaginationDTO<Integer>) mock(PaginationDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      QuestionService questionService0 = mock(QuestionService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(paginationDTO0).when(questionService0).list(nullable(java.lang.Long.class) , nullable(java.lang.Integer.class) , nullable(java.lang.Integer.class));

      //invoke method for profileController0
      PrivateAccess.setVariable((Class<?>) ProfileController.class, profileController0, "questionService", (Object) questionService0);

      //prepare data for httpServletRequest0
      Long long0 = new Long(27L);
      User user0 = mock(User.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(long0).when(user0).getId();
      HttpSession httpSession0 = mock(HttpSession.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(user0).when(httpSession0).getAttribute(nullable(java.lang.String.class));
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(httpSession0).when(httpServletRequest0).getSession();

      //prepare data for model3
      Model model0 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Model model1 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Model model2 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Model model3 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(model2, model1, model0).when(model3).addAttribute(nullable(java.lang.String.class) , any());
      Integer integer0 = new Integer(2689);
      String string0 = profileController0.profile(httpServletRequest0, "questions", model3, integer0, integer0);
      assertEquals("profile", string0);
  }}

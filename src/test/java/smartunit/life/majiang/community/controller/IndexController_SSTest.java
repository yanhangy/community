/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.life.majiang.community.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import java.util.ArrayList;
import life.majiang.community.cache.HotTagCache;
import life.majiang.community.controller.IndexController;
import life.majiang.community.dto.PaginationDTO;
import life.majiang.community.service.QuestionService;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.ui.Model;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class IndexController_SSTest extends IndexController_SSTest_scaffolding {

  @Test(timeout = 4000)
  public void test_index_0()  throws Throwable  {
      IndexController indexController0 = new IndexController();

      //prepare data for hotTagCache0
      ArrayList<String> arrayList0 = new ArrayList<String>();
      HotTagCache hotTagCache0 = mock(HotTagCache.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(arrayList0).when(hotTagCache0).getHots();

      //prepare data for questionService0
      PaginationDTO<Object> paginationDTO0 = (PaginationDTO<Object>) mock(PaginationDTO.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      QuestionService questionService0 = mock(QuestionService.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(paginationDTO0).when(questionService0).list(nullable(java.lang.String.class) , nullable(java.lang.String.class) , nullable(java.lang.String.class) , nullable(java.lang.Integer.class) , nullable(java.lang.Integer.class));

      //invoke method for indexController0
      PrivateAccess.setVariable((Class<?>) IndexController.class, indexController0, "questionService", (Object) questionService0);

      //invoke method for indexController0
      PrivateAccess.setVariable((Class<?>) IndexController.class, indexController0, "hotTagCache", (Object) hotTagCache0);

      //prepare data for model5
      Model model0 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Model model1 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Model model2 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Model model3 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Model model4 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      Model model5 = mock(Model.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(model4, model3, model2, model1, model0).when(model5).addAttribute(nullable(java.lang.String.class) , any());
      Integer integer0 = new Integer(1);
      String string0 = indexController0.index(model5, integer0, integer0, "Should never get here", "search", "Yx=FN&-");
      assertEquals("index", string0);
  }}
